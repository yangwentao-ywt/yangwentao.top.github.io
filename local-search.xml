<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式—工厂模式"><a href="#设计模式—工厂模式" class="headerlink" title="设计模式—工厂模式"></a>设计模式—工厂模式</h1><p>工厂模式是java最常用的设计模式之一，属于创建型模式，它提供了一种创建对象最佳方式，我们只需要定义一个创建对象的接口，让其子类决定实例化哪一个工厂类。</p><h3 id="1-简单工厂模式"><a href="#1-简单工厂模式" class="headerlink" title="1.简单工厂模式"></a>1.简单工厂模式</h3><blockquote><p>现在我们定义一个汽车工厂类，调用者只需要传一个汽车名字（Benz或Audi）就可以创建出相对应的汽车对象</p></blockquote><ol><li><p>创建一个汽车的接口</p><pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>Car &#123; void getName();&#125;</code></pre></li><li><p>创建实现接口的实现类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Benz</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Car</span></span>&#123; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;     System.out.println(<span class="hljs-string">&quot;奔驰&quot;</span>); &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Audi</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Car</span></span>&#123; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;     System.out.println(<span class="hljs-string">&quot;奥迪&quot;</span>); &#125;&#125;</code></pre></li><li><p>创建一个工厂类，用于生成给定信息的实体类对象</p><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarFactory</span> </span>&#123;   <span class="hljs-comment">//根据传入的参数来决定实例化的对象</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Car getCar(<span class="hljs-keyword">String</span> name)&#123;     <span class="hljs-keyword">if</span> (name==<span class="hljs-string">&quot;Benz&quot;</span>)&#123;         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Benz</span>();     &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name==<span class="hljs-string">&quot;Audi&quot;</span>)&#123;         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Audi</span>();     &#125;<span class="hljs-keyword">else</span> &#123;         <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;     &#125; &#125;&#125;</code></pre></li><li><p>使用该工厂，通过传递所需类型信息来获取实例对象</p><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) &#123; Car audi = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CarFactory</span>.</span></span>get<span class="hljs-constructor">Car(<span class="hljs-string">&quot;Audi&quot;</span>)</span>; Car benz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CarFactory</span>.</span></span>get<span class="hljs-constructor">Car(<span class="hljs-string">&quot;Benz&quot;</span>)</span>; audi.get<span class="hljs-constructor">Name()</span>; benz.get<span class="hljs-constructor">Name()</span>;&#125;<span class="hljs-comment">//---------------------------------------输出结果-------------------------------------</span>奥迪奔驰</code></pre></li></ol><h3 id="2-抽象工厂模式"><a href="#2-抽象工厂模式" class="headerlink" title="2.抽象工厂模式"></a>2.抽象工厂模式</h3><blockquote><p>抽象工厂模式是围绕一个超级工厂来创造其他工厂，与工厂方法模式不同的是，工厂方法模式中的工厂只生产单一的产品，而抽象工厂模式中的工厂生产多个产品</p></blockquote><ol><li><p>为手机创建一个接口</p><pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>PhoneProduct &#123; void star(); void sendSMS();&#125;</code></pre></li><li><p>创建实现手机接口的实现类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiPhone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PhoneProduct</span></span>&#123; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">star</span><span class="hljs-params">()</span> </span>&#123;     System.out.println(<span class="hljs-string">&quot;小米开机&quot;</span>); &#125; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendSMS</span><span class="hljs-params">()</span> </span>&#123;     System.out.println(<span class="hljs-string">&quot;小米发短信&quot;</span>); &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HUAWEIPhone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PhoneProduct</span></span>&#123; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">star</span><span class="hljs-params">()</span> </span>&#123;     System.out.println(<span class="hljs-string">&quot;华为开机&quot;</span>); &#125; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendSMS</span><span class="hljs-params">()</span> </span>&#123;     System.out.println(<span class="hljs-string">&quot;华为发短信&quot;</span>); &#125;&#125;</code></pre></li><li><p>为路由器创建一个接口</p><pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>RouterProduct &#123; void star(); void setting();&#125;</code></pre></li><li><p>创建实现路由器接口的实现类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiRouter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RouterProduct</span></span>&#123; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">star</span><span class="hljs-params">()</span> </span>&#123;     System.out.println(<span class="hljs-string">&quot;小米路由器开机&quot;</span>); &#125; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setting</span><span class="hljs-params">()</span> </span>&#123;     System.out.println(<span class="hljs-string">&quot;小米路由器设置&quot;</span>); &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HUAWEIRouter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RouterProduct</span></span>&#123; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">star</span><span class="hljs-params">()</span> </span>&#123;     System.out.println(<span class="hljs-string">&quot;华为路由器开机&quot;</span>); &#125; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setting</span><span class="hljs-params">()</span> </span>&#123;     System.out.println(<span class="hljs-string">&quot;华为路由器设置&quot;</span>); &#125;&#125;</code></pre></li><li><p>为手机和路由器创建一个抽象产品工厂接口(ProductFactory)</p><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ProductFactory</span> &#123; <span class="hljs-comment">//生产手机</span> <span class="hljs-function">PhoneProduct <span class="hljs-title">phoneProduct</span>(<span class="hljs-params"></span>)</span>; <span class="hljs-comment">//生产路由器</span> <span class="hljs-function">RouterProduct <span class="hljs-title">routerProduct</span>(<span class="hljs-params"></span>)</span>;&#125;</code></pre></li><li><p>创建手机和路由器抽象产品工厂实现类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ProductFactory</span></span>&#123; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> PhoneProduct <span class="hljs-title">phoneProduct</span><span class="hljs-params">()</span> </span>&#123;     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MiPhone(); &#125; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> RouterProduct <span class="hljs-title">routerProduct</span><span class="hljs-params">()</span> </span>&#123;     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MiRouter(); &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HUAWEIFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ProductFactory</span></span>&#123; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> PhoneProduct <span class="hljs-title">phoneProduct</span><span class="hljs-params">()</span> </span>&#123;     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HUAWEIPhone(); &#125; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> RouterProduct <span class="hljs-title">routerProduct</span><span class="hljs-params">()</span> </span>&#123;     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HUAWEIRouter(); &#125;&#125;</code></pre></li><li><p>使用ProductFactory接口来获取不同的实现类</p><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> Client &#123; public static void main(String<span class="hljs-literal">[]</span> args) &#123;     PhoneProduct phoneProduct;     RouterProduct routerProduct;     <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;===========================小米========================&quot;</span>);     ProductFactory miFactory = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MiFactory()</span>;     <span class="hljs-comment">//小米手机</span>     phoneProduct = miFactory.phone<span class="hljs-constructor">Product()</span>;     phoneProduct.star<span class="hljs-literal">()</span>;     phoneProduct.send<span class="hljs-constructor">SMS()</span>;     <span class="hljs-comment">//小米路由器</span>     routerProduct = miFactory.router<span class="hljs-constructor">Product()</span>;     routerProduct.star<span class="hljs-literal">()</span>;     routerProduct.setting<span class="hljs-literal">()</span>;     <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;===========================华为========================&quot;</span>);     ProductFactory huaweiFactory = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HUAWEIFactory()</span>;     <span class="hljs-comment">//华为手机</span>     phoneProduct = huaweiFactory.phone<span class="hljs-constructor">Product()</span>;     phoneProduct.star<span class="hljs-literal">()</span>;     phoneProduct.send<span class="hljs-constructor">SMS()</span>;     <span class="hljs-comment">//华为路由器</span>     routerProduct = huaweiFactory.router<span class="hljs-constructor">Product()</span>;     routerProduct.star<span class="hljs-literal">()</span>;     routerProduct.setting<span class="hljs-literal">()</span>; &#125;&#125;<span class="hljs-comment">//-------------------------------------------输出结果-----------------------------------------</span>===========================小米========================小米开机小米发短信小米路由器开机小米路由器设置===========================华为========================华为开机华为发短信华为路由器开机华为路由器设置</code></pre></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式—代理模式"><a href="#设计模式—代理模式" class="headerlink" title="设计模式—代理模式"></a>设计模式—代理模式</h1><p>代理模式是为某个对象提供一个代理对象，并由代理对象控制对原对象的访问，就像我们生活中的中介。</p><p>例如我要结婚，但是结婚是一件很麻烦的事情，需要安排很多事情，我并不想去准备这些繁琐的事情，只想和心爱的人结婚，其他的事情我还可以出钱交给婚庆公司去准备，婚庆公司为我们安排一整套流程。婚庆公司就相当于我们的代理角色</p><h3 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1.静态代理"></a>1.静态代理</h3><blockquote><p>由程序员创建或特定工具自动生成源代码，再对其进行编译。<strong>在程序运行之前，代理类.class文件就已经被创建</strong>，代理类和委托类的关系在运行前就确定</p></blockquote><ol><li><p>创建代理接口</p><pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>ProxyInterface &#123; void marry();&#125;</code></pre></li><li><p>真实角色对象（结婚家庭）</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MarriedFamily</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ProxyInterface</span> </span>&#123; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">marry</span><span class="hljs-params">()</span> </span>&#123;     System.out.println(<span class="hljs-string">&quot;我们结婚了&quot;</span>); &#125;&#125;</code></pre></li><li><p>代理角色（婚庆公司）</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeddingCompany</span> <span class="hljs-title">implements</span> <span class="hljs-title">ProxyInterface</span>&#123;</span> <span class="hljs-keyword">private</span> ProxyInterface proxyInterface; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WeddingCompany</span> <span class="hljs-params">(ProxyInterface proxyInterface)</span></span>&#123;     <span class="hljs-keyword">this</span>.proxyInterface=proxyInterface; &#125; @Override <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">marry</span><span class="hljs-params">()</span> </span>&#123;     System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;我们是婚庆公司的&quot;</span>);     System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;我们在做结婚前的准备工作&quot;</span>);     System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;可以开始结婚了&quot;</span>);     proxyInterface.marry();     System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;结婚完毕&quot;</span>); &#125;&#125;</code></pre></li><li><p>测试</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTest</span> &#123;</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;     ProxyInterface proxyInterface=<span class="hljs-keyword">new</span> WeddingCompany(<span class="hljs-keyword">new</span> MarriedFamily());     proxyInterface.marry(); &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * =====================================结果==================================</span><span class="hljs-comment">  * 我们是婚庆公司的</span><span class="hljs-comment">  * 我们在做结婚前的准备工作</span><span class="hljs-comment">  * 可以开始结婚了</span><span class="hljs-comment">  * 我们结婚了</span><span class="hljs-comment">  * 结婚完毕</span><span class="hljs-comment">  **/</span></code></pre></li></ol><blockquote><p>优点：可以做到在符合开闭原则下对目标对象进行功能扩展</p><p>缺点：</p><ol><li>代理类和委托类都实现了相同的接口，出现大量代码重复，如果接口增加一个方法，除了实现类要实现这个方法外，其他代理类也要实现此方法</li><li>代理对象只服务于一种类型的对象，如果要服务多类型的对象。势必要为每一种对象都进行代理，静态代理在程序规模稍大时就无法胜任了</li></ol></blockquote><h3 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2.动态代理"></a>2.动态代理</h3><blockquote><p>动态代理是在运行时，<strong>通过反射机制实现动态代理，并且能够代理各种类型的对象</strong>。想要实现动态代理需要实现InvocationHandler 接口和Proxy类</p></blockquote><ol><li><p>创建代理接口</p><pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>ProxyInterface &#123; void marry();&#125;</code></pre></li><li><p>真实角色对象</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MarriedFamily</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ProxyInterface</span> </span>&#123; <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">marry</span><span class="hljs-params">()</span> </span>&#123;     System.out.println(<span class="hljs-string">&quot;我们结婚了&quot;</span>); &#125;&#125;</code></pre></li><li><p>动态创建代理对象的类</p><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeddingCompanyHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123; <span class="hljs-comment">//被代理的接口</span> <span class="hljs-keyword">private</span> Object <span class="hljs-keyword">target</span>; <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setTarget</span><span class="hljs-params">(Object <span class="hljs-keyword">target</span>)</span></span>&#123;     <span class="hljs-keyword">this</span>.<span class="hljs-keyword">target</span> = <span class="hljs-keyword">target</span>; &#125;  <span class="hljs-comment">/**</span><span class="hljs-comment">     * 生成得到代理类,Proxy.newProxyInstance()方法接受三个参数：</span><span class="hljs-comment">     * ClassLoader loader:指定当前目标对象使用的类加载器,获取加载器的方法是固定的</span><span class="hljs-comment">     * Class&lt;?&gt;[] interfaces:指定目标对象实现的接口的类型,使用泛型方式确认类型</span><span class="hljs-comment">     * InvocationHandler:指定动态处理器，执行目标对象的方法时,会触发事件处理器的方法</span><span class="hljs-comment">     */</span> <span class="hljs-keyword">public</span> <span class="hljs-function">Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span>&#123;     <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">target</span>.getClass().getClassLoader()             , <span class="hljs-keyword">target</span>.getClass().getInterfaces()             ,<span class="hljs-keyword">this</span>); &#125; <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>:处理代理实例，并返回结果</span><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: [o, method, args]</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: Object</span><span class="hljs-comment">     */</span> <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-function">Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object o, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;     System.out.println(<span class="hljs-string">&quot;我们是婚庆公司的&quot;</span>);     System.out.println(<span class="hljs-string">&quot;我们在做结婚前的准备工作&quot;</span>);     System.out.println(<span class="hljs-string">&quot;可以开始结婚了&quot;</span>);     Object result = method.invoke(<span class="hljs-keyword">target</span>, args);     System.out.println(<span class="hljs-string">&quot;结婚完毕&quot;</span>);     <span class="hljs-keyword">return</span> result; &#125;&#125;</code></pre></li><li><p>测试</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTest</span> &#123;</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;     <span class="hljs-comment">//真实角色</span>     ProxyInterface marriedFamily=<span class="hljs-keyword">new</span> MarriedFamily();     <span class="hljs-comment">//代理角色</span>     WeddingCompanyHandler weddingCompany = <span class="hljs-keyword">new</span> WeddingCompanyHandler();     <span class="hljs-comment">//通过调用程序处理角色来处理我们要调用的接口对象</span>     weddingCompany.setTarget(marriedFamily);     ProxyInterface proxy = (ProxyInterface) weddingCompany.getProxy();     proxy.marry(); &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * =====================================结果==================================</span><span class="hljs-comment">  * 我们是婚庆公司的</span><span class="hljs-comment">  * 我们在做结婚前的准备工作</span><span class="hljs-comment">  * 可以开始结婚了</span><span class="hljs-comment">  * 我们结婚了</span><span class="hljs-comment">  * 结婚完毕</span><span class="hljs-comment">  **/</span></code></pre></li></ol><blockquote><p>优点：动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（<code>InvocationHandler.invoke</code>）这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。而且动态代理的应用使我们的类职责更加单一，复用性更强。</p><p>缺点：始终无法摆脱仅支持 interface代理，Java 的继承机制注定了这些动态代理类们无法实现对 class 的动态代理</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h1><h3 id="ssm框架搭建"><a href="#ssm框架搭建" class="headerlink" title="ssm框架搭建"></a>ssm框架搭建</h3><ol><li><p>在pom.xml导入所需依赖包</p><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!-- spring版本号 --&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>4.3.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--Spring相关依赖--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--引入mybatis依赖--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--引入MySQL驱动--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.48<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--阿里的数据库连接池--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--mybatis spring整合包--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--spring对jdbc整合--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--引入lombok--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--SpringMVC依赖--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--测试依赖包--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--分页依赖包--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.jsqlparser<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsqlparser<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--@ResponseBody依赖包--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--JSON依赖包--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.62<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--jstl--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!-- servlet-api --&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!-- standard --&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><span class="xml">  <span class="hljs-comment">&lt;!-- 如果不添加此节点mybatis的mapper.xml文件都会被漏掉。 --&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span></code></pre></li><li><p>配置applicationContext.xml</p><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><span class="xml">          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><span class="xml">          xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><span class="xml">          xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><span class="xml">          xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><span class="xml">          xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><span class="xml">           http://www.springframework.org/schema/beans/spring-beans.xsd</span><span class="xml">           http://www.springframework.org/schema/tx</span><span class="xml">           http://www.springframework.org/schema/tx/spring-tx.xsd</span><span class="xml">           http://www.springframework.org/schema/context</span><span class="xml">           http://www.springframework.org/schema/context/spring-context.xsd</span><span class="xml">           http://www.springframework.org/schema/aop</span><span class="xml">           http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><span class="xml">   </span><span class="xml">       <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.accp.service&quot;</span>/&gt;</span></span><span class="xml">   </span><span class="xml">       <span class="hljs-comment">&lt;!--读取jdbc.properties--&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ppc&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span>&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;location&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="xml">   </span><span class="xml">       <span class="hljs-comment">&lt;!--配置数据库连接池--&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;driver&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;url&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;username&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;password&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">           <span class="hljs-comment">&lt;!-- 配置初始化大小、最大 --&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span></span><span class="xml">           <span class="hljs-comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;60000&quot;</span> /&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span></span><span class="xml">           <span class="hljs-comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;60000&quot;</span> /&gt;</span></span><span class="xml">           <span class="hljs-comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;300000&quot;</span> /&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testWhileIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span></span><span class="xml">           <span class="hljs-comment">&lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnBorrow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnReturn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span></span><span class="xml">           <span class="hljs-comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;poolPreparedStatements&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxOpenPreparedStatements&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="xml">       <span class="hljs-comment">&lt;!--配置数据库连接和mybatis的关联--&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactoryBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><span class="xml">           <span class="hljs-comment">&lt;!--引用数据源组件--&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">           <span class="hljs-comment">&lt;!--配置sql映射文件信息--&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath*:com/accp/mapper/*.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="xml">       <span class="hljs-comment">&lt;!--局部配置文件和接口关联配置--&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mapperScannerConfigurer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactoryBean&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.accp.mapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="xml">   </span><span class="xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span></code></pre></li><li><p>配置spring-mvc.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">         http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">            http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><span class="hljs-tag"><span class="hljs-string">         http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">            http://www.springframework.org/schema/context/spring-context.xsd &quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--开启包扫描--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.accp.controller&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span> <span class="hljs-comment">&lt;!--开启mvc注解扫描--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> &gt;</span>     <span class="hljs-comment">&lt;!--中文乱码--&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">bean</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;supportedMediaTypes&quot;</span>&gt;</span>                 <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>                     <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>application/json;charset=UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                 <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>             <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>         <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></li><li><p>配置web.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee</span></span><span class="hljs-tag"><span class="hljs-string">    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--中文乱码过滤器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-comment">&lt;!--配置监听器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-comment">&lt;!--配置拦截器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-comment">&lt;!--配置默认页面--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>login.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></li><li><p>创建controller、mapper、pojo、service测试</p><p>&lt;!–hexoPostRenderEscape:<pre><code class="hljs less"><span class="hljs-variable">@Controller</span><br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;user&quot;</span>)<br>public class UserController &#123;<br> <span class="hljs-variable">@Autowired</span><br> private UserService userService;<br> <span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;getuserInfos&quot;</span>)<br> <span class="hljs-variable">@ResponseBody</span><br> public Map&lt;String, Object&gt; getUserInfos(User user,</p><pre><code>                                     &lt;span class=&quot;hljs-variable&quot;&gt;@RequestParam&lt;/span&gt;(defaultValue = &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;) Integer page,                                     &lt;span class=&quot;hljs-variable&quot;&gt;@RequestParam&lt;/span&gt;(defaultValue = &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;) Integer limit)&amp;#123; &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.findUserList&lt;/span&gt;(user, page, limit);</code></pre><p> &#125;</p></li></ol><p>&#125;</code></pre>:hexoPostRenderEscape–&gt;</p>   <pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>UserMapper &#123;    List&lt;User&gt; findUser(@Param(<span class="hljs-string">&quot;userName&quot;</span>) String userName, @Param(<span class="hljs-string">&quot;userRole&quot;</span>) int userRole);&#125;</code></pre>   <pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.accp.mapper.UserMapper&quot;</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.accp.pojo.User&quot;</span>&gt;</span></span><span class="xml">        select u.*,r.roleName as userRoleName</span><span class="xml">        from smbms_user u,smbms_role r</span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span></span><span class="xml">            u.userRole = r.id</span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null and userName != &#x27;&#x27;&quot;</span>&gt;</span></span><span class="xml">                and userName like CONCAT(&#x27;%&#x27;,#</span><span class="hljs-template-variable">&#123;userName&#125;</span><span class="xml">,&#x27;%&#x27;)</span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userRole != null and userRole != &#x27;&#x27;&quot;</span>&gt;</span></span><span class="xml">                and userRole =#</span><span class="hljs-template-variable">&#123;userRole&#125;</span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></span><span class="xml">        order by creationDate DESC</span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span></code></pre>   <pre><code class="hljs lasso">@<span class="hljs-built_in">Data</span><span class="hljs-keyword">public</span> class User &#123;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> id;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> userCode;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> userName;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> userPassword;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> gender;    @JSONField(format = <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)    @DateTimeFormat(pattern = <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Date</span> birthday;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> phone;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> address;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> userRole;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> createdBy;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Date</span> creationDate;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> modifyBy;    @DateTimeFormat(pattern = <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Date</span> modifyDate;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> age;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> userRoleName;&#125;</code></pre>   <pre><code class="hljs reasonml">@Servicepublic <span class="hljs-keyword">class</span> UserServiceImpl implements UserService &#123;    @Autowired    <span class="hljs-keyword">private</span> UserMapper userMapper;    @Override    public Map&lt;String, Object&gt; find<span class="hljs-constructor">UserList(User <span class="hljs-params">user</span>, Integer <span class="hljs-params">pageNum</span>, Integer <span class="hljs-params">pageSize</span>)</span> &#123;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageHelper</span>.</span></span>start<span class="hljs-constructor">Page(<span class="hljs-params">pageNum</span>,<span class="hljs-params">pageSize</span>)</span>;        List&lt;User&gt; userList = userMapper.find<span class="hljs-constructor">User(<span class="hljs-params">user</span>.<span class="hljs-params">getUserName</span>()</span>,user.get<span class="hljs-constructor">UserRole()</span>);        PageInfo&lt;User&gt; pageInfo = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PageInfo(<span class="hljs-params">userList</span>)</span>;        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;        map.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">0</span>);        map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;success&quot;</span>);        map.put(<span class="hljs-string">&quot;count&quot;</span>,pageInfo.get<span class="hljs-constructor">Total()</span>);        map.put(<span class="hljs-string">&quot;data&quot;</span>,pageInfo.get<span class="hljs-constructor">List()</span>);        return map;    &#125;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/Spring%E6%A1%86%E6%9E%B6%E2%80%94Spring%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/Spring%E6%A1%86%E6%9E%B6%E2%80%94Spring%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring框架—Spring核心概念"><a href="#Spring框架—Spring核心概念" class="headerlink" title="Spring框架—Spring核心概念"></a>Spring框架—Spring核心概念</h1><h3 id="1-SpringIOC控制反转"><a href="#1-SpringIOC控制反转" class="headerlink" title="1.SpringIOC控制反转"></a>1.SpringIOC控制反转</h3><p>​        控制反转（Inversion of Cpntrol IoC），也被称为依赖注入，是面向对象编程的中的一种设计理念，用来降低程序代码之间的耦合</p><h3 id="2-创建Spring项目"><a href="#2-创建Spring项目" class="headerlink" title="2.创建Spring项目"></a>2.创建Spring项目</h3><ol><li><p>在pom.xml中导入spring依赖</p><pre><code class="hljs dust"><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!-- spring版本号 --&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>4.3.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--Spring相关依赖--&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span></code></pre></li><li><p>创建applicationContext.xml配置文件</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">           <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">           <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">           <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></li><li><p>把对象创建交给spring管理</p><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;com.accp.service.impl.AccountServiceImpl&quot;</span>&gt;&lt;/bean&gt;</code></pre></li><li><p>创建测试类</p><pre><code class="hljs reasonml"><span class="hljs-comment">//1.获取核心容器对象</span>ClassPathXmlApplicationContext ac=<span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>)</span>;<span class="hljs-comment">//2.根据id获取bean对象</span>AccountService <span class="hljs-keyword">as</span> =ac.get<span class="hljs-constructor">Bean(<span class="hljs-string">&quot;accountService&quot;</span>,AccountService.<span class="hljs-params">class</span>)</span>;<span class="hljs-comment">//3.根据对象调取方法</span><span class="hljs-keyword">as</span>.save<span class="hljs-constructor">Account()</span>;<span class="hljs-comment">//4.关闭核心容器对象</span>ac.close<span class="hljs-literal">()</span>;</code></pre></li></ol><h3 id="3-SpringAOP面向切面编程"><a href="#3-SpringAOP面向切面编程" class="headerlink" title="3.SpringAOP面向切面编程"></a>3.SpringAOP面向切面编程</h3><p>​            面向切面编程是软件编程思想发展到一定阶段的掺入，是面向对象编程的有益补充。AOP一般适用于具有横切逻辑的场合，如访问控制、事务管理、性能监测等。</p><h3 id="4-在applicationContext-xml中配置AOP切面"><a href="#4-在applicationContext-xml中配置AOP切面" class="headerlink" title="4.在applicationContext.xml中配置AOP切面"></a>4.在applicationContext.xml中配置AOP切面</h3><ol><li>把通知Bean也交给spring来管理</li><li>使用aop:config标签表明开始配置AOP</li><li>使用aop:aspect标签表明配置切面</li><li>在aop:aspect内部使用对应标签来配置通知类型</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置Logger类--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logger&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.accp.utils.Logger&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>     <span class="hljs-comment">&lt;!--配置切入点表达式  id表示指定表达式的唯一标识   expression属性用于指定表达式内容</span><span class="hljs-comment">         此标签写在aop:aspect标签内部只能当前切面使用</span><span class="hljs-comment">         它还可以写在aop:aspect外面，此时变为所有切面可以用。注意必须写在aop:aspect前面</span><span class="hljs-comment">     --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;proxy&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.accp.service.*.*(..))&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logAdvice&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;logger&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--配置前置通知  在切入点方法之前执行--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;prLogger&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;proxy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:before</span>&gt;</span>        <span class="hljs-comment">&lt;!--配置后置通知  在切入点方法正常执行之后执行--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturnPrLogger&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;proxy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after-returning</span>&gt;</span>        <span class="hljs-comment">&lt;!--配置异常通知  在切入点方法产生异常之后执行--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrowingPrLogger&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;proxy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after-throwing</span>&gt;</span>        <span class="hljs-comment">&lt;!--配置最终通知  无论切入点是否正常都会执行--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterPrLogger&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;proxy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span></code></pre><h3 id="5-配置AOP环绕通知"><a href="#5-配置AOP环绕通知" class="headerlink" title="5.配置AOP环绕通知"></a>5.配置AOP环绕通知</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置环绕通知--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;aroundLogger&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;proxy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:around</span>&gt;</span> if (&quot;&quot;.equals(username) &amp;&amp; &quot;&quot;.equals(pwd)) &#123;    try &#123;        pp.proceed();    &#125; catch (Throwable throwable) &#123;        throw new RuntimeException(e);    &#125;&#125; else &#123;    System.out.println(&quot;用户名或密码错误&quot;);&#125;</code></pre><p>​        spring框架为我们提供一个接口：该接口中有一个方法proceed()此方法相当于明确调用切入点方法。该方法可以作环绕通知方法的参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用</p><h3 id="6-bean标签的作用范围"><a href="#6-bean标签的作用范围" class="headerlink" title="6.bean标签的作用范围"></a>6.bean标签的作用范围</h3><ol><li>singleton：单例的（默认值）</li><li>prototype：多例的</li><li>request：用于web应用的请求范围</li><li>session：用于web应用的会话范围</li><li>global_session：作用于web应用的集群范围（全局会话范围），当不是集群范围的时候他就是session</li></ol><h3 id="7-bean对象的的生命周期"><a href="#7-bean对象的的生命周期" class="headerlink" title="7.bean对象的的生命周期"></a>7.bean对象的的生命周期</h3><ol><li><p>单例对象：出生：当容器创建时就一直活着</p><p>​                  活着：只要容器还在就一直活着</p><p>​                  死亡：容器销毁，对象死亡</p><p>​                  总结：单例对象的生命周期和容器相同</p></li><li><p>多例对象：出生：当我们使用对象时spring框架为我们创建</p><p>​                  活着：对象在使用过程中就就一直活着</p><p>​                  死亡：当对象长时间不使用或者没有其他对象应用是，有java的垃圾回收机制回收</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/Spring%E6%A1%86%E6%9E%B6%E2%80%94Spring%E4%B8%8EMybatis%E6%95%B4%E5%90%88/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/Spring%E6%A1%86%E6%9E%B6%E2%80%94Spring%E4%B8%8EMybatis%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring框架—Spring与Mybatis整合"><a href="#Spring框架—Spring与Mybatis整合" class="headerlink" title="Spring框架—Spring与Mybatis整合"></a>Spring框架—Spring与Mybatis整合</h1><h3 id="1-在pom-xml中导入相关坐标依赖"><a href="#1-在pom-xml中导入相关坐标依赖" class="headerlink" title="1.在pom.xml中导入相关坐标依赖"></a>1.在pom.xml中导入相关坐标依赖</h3><pre><code class="hljs dust"><span class="xml"> <span class="hljs-comment">&lt;!-- spring版本号 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>4.3.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--Spring相关依赖--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--引入mybatis依赖--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--引入MySQL驱动--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.48<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">      <span class="hljs-comment">&lt;!--阿里的数据库连接池--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--mybatis spring整合包--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--spring对jdbc整合--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--引入lombok--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!-- 配置编译依赖工具 --&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--解决版本问题，发布项目时避免文件丢失--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span></span><span class="xml">        <span class="hljs-comment">&lt;!--resources文件--&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span></span><span class="xml">            <span class="hljs-comment">&lt;!-- 是否被过滤,如果被过滤则无法使用 --&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span></span><span class="xml">        <span class="hljs-comment">&lt;!--java文件--&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span></code></pre><h3 id="2-编写applicationContext-xml配置文件"><a href="#2-编写applicationContext-xml配置文件" class="headerlink" title="2.编写applicationContext.xml配置文件"></a>2.编写applicationContext.xml配置文件</h3><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><span class="xml">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><span class="xml">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><span class="xml">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><span class="xml">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><span class="xml">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><span class="xml">        http://www.springframework.org/schema/tx</span><span class="xml">        http://www.springframework.org/schema/tx/spring-tx.xsd</span><span class="xml">        http://www.springframework.org/schema/context</span><span class="xml">        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><span class="xml">  </span><span class="xml">  <span class="hljs-comment">&lt;!--告知spring在创建容器时需要扫描的包，配置所需要的标签不是在beans约束中，</span></span><span class="xml">    而是一个名称为context名称空间和约束中--&gt;</span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.accp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span></span><span class="xml">  <span class="hljs-comment">&lt;!--读取jdbc.properties--&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ppc&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;location&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="xml">  <span class="hljs-comment">&lt;!--配置数据库连接池--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;driver&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;url&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;username&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;password&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="xml">   <span class="hljs-comment">&lt;!--配置数据库连接和mybatis的关联--&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactoryBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-comment">&lt;!--引用数据源组件--&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">      <span class="hljs-comment">&lt;!--配置sql映射文件信息--&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath*:com/accp/mapper/*.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="xml">  <span class="hljs-comment">&lt;!--局部配置文件和接口关联配置--&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mapperScannerConfigurer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactoryBean&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.accp.mapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span></code></pre><h3 id="3-建立开发目录结构"><a href="#3-建立开发目录结构" class="headerlink" title="3.建立开发目录结构"></a>3.建立开发目录结构</h3><ol><li><p>建立实体类Bill</p><pre><code class="hljs arduino">@Data<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bill</span> &#123;</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id; <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> billCode; <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> productName; <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> productDesc;&#125;</code></pre></li><li><p>建立mapper层</p><pre><code class="hljs lisp">List&lt;Bill&gt; findBill(<span class="hljs-name">Bill</span> bill)<span class="hljs-comment">;</span></code></pre><pre><code class="hljs n1ql">&lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;findBill&quot;</span> resultType=<span class="hljs-string">&quot;com.accp.pojo.Bill&quot;</span>&gt; <span class="hljs-keyword">SELECT</span> b.<span class="hljs-symbol">`id`</span>,b.<span class="hljs-symbol">`billCode`</span>,b.<span class="hljs-symbol">`productName`</span>,b.<span class="hljs-symbol">`productDesc`</span> <span class="hljs-keyword">FROM</span> smbms_bill b &lt;<span class="hljs-keyword">where</span>&gt;     &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;id!=null and id!=&#x27;&#x27;&quot;</span>&gt;         id=#&#123;id&#125;     &lt;/<span class="hljs-keyword">if</span>&gt;     &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;productName!=null and productName!=&#x27;&#x27;&quot;</span>&gt;         <span class="hljs-keyword">and</span> productName <span class="hljs-keyword">LIKE</span> CONCAT(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;productName&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)     &lt;/<span class="hljs-keyword">if</span>&gt; &lt;/<span class="hljs-keyword">where</span>&gt;&lt;/<span class="hljs-keyword">select</span>&gt;</code></pre></li><li><p>建立service层</p><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BillServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BillService</span> </span>&#123; <span class="hljs-meta">@Autowired</span> <span class="hljs-keyword">private</span> BillMapper billMapper; <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Bill&gt; <span class="hljs-title">findBill</span><span class="hljs-params">(Bill bill)</span></span>&#123;       <span class="hljs-keyword">return</span> billMapper.findBill(bill);   &#125;&#125;</code></pre></li><li><p>创建测试类</p><pre><code class="hljs mipsasm">ApplicationContext ac= new ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<span class="hljs-keyword">BillServiceImpl </span><span class="hljs-keyword">billService </span>= ac.getBean(<span class="hljs-string">&quot;billServiceImpl&quot;</span>, <span class="hljs-keyword">BillServiceImpl.class);</span><span class="hljs-keyword">Bill </span><span class="hljs-keyword">bill=new </span><span class="hljs-keyword">Bill();</span><span class="hljs-keyword">bill.setId(1);</span><span class="hljs-keyword">bill.setProductName(&quot;皂&quot;);</span><span class="hljs-keyword">List&lt;Bill&gt; </span><span class="hljs-keyword">billList </span>= <span class="hljs-keyword">billService.findBill(bill);</span><span class="hljs-keyword">for </span>(<span class="hljs-keyword">Bill </span><span class="hljs-keyword">bills </span>: <span class="hljs-keyword">billList) </span>&#123; System.out.println(<span class="hljs-keyword">bills);</span><span class="hljs-keyword">&#125;</span><span class="hljs-keyword">((ClassPathXmlApplicationContext)ac).close();</span></code></pre></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/Spring%E6%A1%86%E6%9E%B6%E2%80%94IOC%E5%92%8CAOP%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/Spring%E6%A1%86%E6%9E%B6%E2%80%94IOC%E5%92%8CAOP%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring框架—IOC和AOP使用扩展"><a href="#Spring框架—IOC和AOP使用扩展" class="headerlink" title="Spring框架—IOC和AOP使用扩展"></a>Spring框架—IOC和AOP使用扩展</h1><p>1.多种方式实现依赖注入</p><ol><li><p>构造函数注入</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.accp.service.impl.accountServiceImpl&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;now&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>标签的属性:</p><ul><li><p>type:用于指定要注入的数据的数据类型，该数据类型也是构造函数中的某个或某些参数          </p><p>index:用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引位置从0开始          </p><p>name:用于指定给构造函数中指定名称的参数赋值          </p><p>value:用于提供基本类型和String类型的数据          </p></li></ul></li></ol><ul><li>ref:用于指定其他bean类型的数据。它指的是在spring的IOC核心容器出现过的bean对象</li></ul><ol><li><p>使用set方法注入</p><pre><code class="hljs applescript">&lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;com.accp.service.impl.accountServiceImpl&quot;</span>&gt; &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;李四&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt; &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;age&quot;</span> value=<span class="hljs-string">&quot;18&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt; &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-keyword">ref</span>=<span class="hljs-string">&quot;now&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt;&lt;/bean&gt;</code></pre><p>标签的属性:</p><ul><li>name:用于指定注入时所调用的set方法名称          </li><li>value:用于提供基本类型和String类型的数据          </li><li>ref:用于指定其他bean类型的数据。它指的是在spring的IOC核心容器出现过的bean对象</li></ul></li><li><p>复杂类型注入</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.accp.service.impl.accountServiceImpl&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--注入list--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>钱七<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--注入set--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>钱七<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--注入map--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;王五&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;钱七&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--注入properties--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span>钱七<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></li></ol><h3 id="2-使用注解实现IoC配置"><a href="#2-使用注解实现IoC配置" class="headerlink" title="2.使用注解实现IoC配置"></a>2.使用注解实现IoC配置</h3><ol><li><p>在applicationContext.xml中配置创建容器需要扫描的包</p><p>&lt;!–hexoPostRenderEscape:<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a>&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a></span></span><br><span class="hljs-tag"><span class="hljs-string">        <a href="http://www.springframework.org/schema/beans/spring-beans.xsd">http://www.springframework.org/schema/beans/spring-beans.xsd</a></span></span><br><span class="hljs-tag"><span class="hljs-string">        <a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a></span></span><br><span class="hljs-tag"><span class="hljs-string">        <a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a>&quot;</span>&gt;</span></p></li></ol><pre><code>&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--告知spring在创建容器时需要扫描的包，配置所需要的标签不是在beans约束中，&lt;/span&gt;</code></pre><p><span class="hljs-comment">        而是一个名称为context名称空间和约束中–&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.accp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre>:hexoPostRenderEscape–&gt;</p><p>2.使用注解定义Bean</p><ul><li>@Component:，value用于指定bean的id，他的默认名称是当前类名，且首字母小写      </li><li>@Controller:一般用于表现层     </li><li>@Service:一般用于业务层 </li><li>@Repository:一般用在持久层</li></ul><h3 id="3-使用注解实现Bean组件装配"><a href="#3-使用注解实现Bean组件装配" class="headerlink" title="3.使用注解实现Bean组件装配"></a>3.使用注解实现Bean组件装配</h3><h4 id="3-1-用于注入数据的"><a href="#3-1-用于注入数据的" class="headerlink" title="3.1.用于注入数据的"></a>3.1.用于注入数据的</h4><ul><li><p>@Autowired:作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功</p><pre><code class="hljs aspectj"><span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> accountDao accountDao;</code></pre></li><li><p>@Qualifier(“Str”):作用:在按照类中注入的基础之上再按照名称注入，它在给类成员注入时不能单独使用（和Autowired组合在一起），但是在给方法参数注入时可以使用</p><pre><code class="hljs less"><span class="hljs-variable">@Autowired</span><span class="hljs-variable">@Qualifier</span>(<span class="hljs-string">&quot;accountDao&quot;</span>)private accountDao accountDao;</code></pre></li><li><p>@Resource(name = “Str”)：作用:直接按照bean的id注入，可以独立使用<br>属性:value用于指定bean的id</p><pre><code class="hljs kotlin"><span class="hljs-meta">@Resource(name = <span class="hljs-meta-string">&quot;accountDao&quot;</span>)</span><span class="hljs-keyword">private</span> accountDao accountDao;</code></pre></li><li><p>@value:作用:用于注入基本数据类型和string类型数据<br>属性:value用于指定数据的值，它可以使用spring中的SpEl（spring的EL表达式）<br>SpEl写法:${表达式}</p><pre><code class="hljs kotlin"><span class="hljs-meta">@Value(<span class="hljs-meta-string">&quot;<span class="hljs-subst">$&#123;jdbc.driver&#125;</span>&quot;</span>)</span><span class="hljs-keyword">private</span> String driver;</code></pre></li></ul><h4 id="3-2-用于改变作用范围"><a href="#3-2-用于改变作用范围" class="headerlink" title="3.2.用于改变作用范围"></a>3.2.用于改变作用范围</h4><ul><li><p>@Scope:作用:用于指定bean的作用范围</p><pre><code class="hljs kotlin"><span class="hljs-meta">@Scope(<span class="hljs-meta-string">&quot;singleton&quot;</span>)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">accountServiceImpl</span></span>&#123;&#125;</code></pre></li></ul><h4 id="3-3-和生命周期相关的"><a href="#3-3-和生命周期相关的" class="headerlink" title="3.3.和生命周期相关的"></a>3.3.和生命周期相关的</h4><ul><li><p>@PostConstruct:用于指定初始化方法</p><pre><code class="hljs arduino">@PostConstruct<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;  System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;初始化&quot;</span>);&#125;</code></pre></li><li><p>@PreDestroy:用于指定销毁方法</p><pre><code class="hljs arduino">@PreDestroy<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span></span>&#123;  System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;销毁&quot;</span>);&#125;</code></pre></li></ul><h4 id="3-4-spring中的新注解"><a href="#3-4-spring中的新注解" class="headerlink" title="3.4.spring中的新注解"></a>3.4.spring中的新注解</h4><ul><li><p>@Configuration:指定当前类是一个配置类</p><p> 细节:当配置类作为AnnotationConfigApplicationContext对象创建的参数时该注解可以不写</p><pre><code class="hljs angelscript">@Configuration<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">SpringConfiguration</span> &#123;&#125;</code></pre></li><li><p>@ComponentScan:通过注解指定spring在创建容器时要扫描的包</p><p>使用此注解相当于在xml中配置了:&lt;context:component-scan base-package=”com.accp”/&gt;</p><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><span class="hljs-variable">@ComponentScan</span>(basePackages = <span class="hljs-string">&quot;com.accp&quot;</span>)public class SpringConfiguration &#123;&#125;</code></pre></li><li><p>@PropertySource:用于指定PropertySource文件的位置属性:</p><p> value指定文件的名称和路径，classPath指的是当前文件的类路径 </p><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><span class="hljs-variable">@ComponentScan</span>(basePackages = <span class="hljs-string">&quot;com.accp&quot;</span>)<span class="hljs-variable">@PropertySource</span>(<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>)public class SpringConfiguration &#123;&#125;</code></pre></li><li><p>@Bean:用于把当前方法的返回值作为bean对象存入IOC容器中</p><p>属性:name用于指定bean的id，默认值是当前方法的名称</p><pre><code class="hljs aspectj"><span class="hljs-meta">@Bean</span>(name = <span class="hljs-string">&quot;dataSource&quot;</span>)<span class="hljs-keyword">public</span> <span class="hljs-function">DataSource <span class="hljs-title">createDataSource</span><span class="hljs-params">()</span> </span>&#123;&#125;</code></pre></li><li><p>@Import(Class):用于导入其他配置类</p></li></ul><h3 id="4-使用注解标注AOP切面"><a href="#4-使用注解标注AOP切面" class="headerlink" title="4.使用注解标注AOP切面"></a>4.使用注解标注AOP切面</h3><ol><li>@Aspect ：表示当前类是一个切面类</li></ol>   <pre><code class="hljs angelscript">@Aspect<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Logger</span>  &#123;&#125;</code></pre><ol start="2"><li>@Pointcut：</li></ol>   <pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* com.accp.service.impl.*.*(..))&quot;)</span><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pt1</span><span class="hljs-params">()</span></span>&#123;&#125;</code></pre><ol start="3"><li>@Before：前置通知</li></ol>   <pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;pt1()&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prLogger</span><span class="hljs-params">()</span></span>&#123;    System.out.println(<span class="hljs-string">&quot;前置prLogger日志开始工作&quot;</span>);&#125;</code></pre><ol start="4"><li>@AfterReturning：后置通知</li></ol>   <pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(&quot;pt1()&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturnPrLogger</span><span class="hljs-params">()</span></span>&#123;    System.out.println(<span class="hljs-string">&quot;后置afterReturnPrLogger日志开始工作&quot;</span>);&#125;</code></pre><ol start="5"><li>@AfterThrowing：异常通知</li></ol>   <pre><code class="hljs java"><span class="hljs-meta">@AfterThrowing(&quot;pt1()&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterThrowingPrLogger</span><span class="hljs-params">()</span></span>&#123;    System.out.println(<span class="hljs-string">&quot;异常afterThrowingPrLogger日志开始工作&quot;</span>)&#125;</code></pre><ol start="6"><li>@After：异常通知</li></ol>   <pre><code class="hljs java"><span class="hljs-meta">@After(&quot;pt1()&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPrLogger</span><span class="hljs-params">()</span></span>&#123;    System.out.println(<span class="hljs-string">&quot;最终afterPrLogger日志开始工作&quot;</span>);&#125;</code></pre><ol start="7"><li>@Around：环绕通知</li></ol>   <pre><code class="hljs reasonml">@<span class="hljs-constructor">Around(<span class="hljs-string">&quot;pt1()&quot;</span>)</span>public Object around<span class="hljs-constructor">Logger(ProceedingJoinPoint <span class="hljs-params">pjp</span>)</span>&#123;    Object rtValue;    <span class="hljs-keyword">try</span> &#123;        Object<span class="hljs-literal">[]</span> args=pjp.get<span class="hljs-constructor">Args()</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;前置aroundLogger日志开始工作&quot;</span>);          <span class="hljs-comment">//proceed()方法相当于明确调用切入点方法。</span>        rtValue=pjp.proceed(args);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;后置aroundLogger日志开始工作&quot;</span>);        return rtValue;    &#125; catch (Throwable e) &#123;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;异常aroundLogger日志开始工作&quot;</span>);        throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RuntimeException(<span class="hljs-params">e</span>)</span>;    &#125;finally &#123;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;最终aroundLogger日志开始工作&quot;</span>);    &#125;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/SpringMVC%E6%A1%86%E6%9E%B6%E2%80%94%E5%88%9D%E5%A7%8BSpringMVC/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/SpringMVC%E6%A1%86%E6%9E%B6%E2%80%94%E5%88%9D%E5%A7%8BSpringMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC框架—初始SpringMVC"><a href="#SpringMVC框架—初始SpringMVC" class="headerlink" title="SpringMVC框架—初始SpringMVC"></a>SpringMVC框架—初始SpringMVC</h1><h3 id="1-创建SpringMVC项目"><a href="#1-创建SpringMVC项目" class="headerlink" title="1.创建SpringMVC项目"></a>1.创建SpringMVC项目</h3><ol><li><p>新建一个maven项目   （为了快速引入jar：    archetypeCatalog   internal）</p><p><img src="https://pic.downk.cc/item/5e74978ec8156f1e6fdb08ca.png" alt="img"></p><p><img src="https://pic.downk.cc/item/5e749797c8156f1e6fdb10a8.png" alt="img"></p></li><li><p>在pom.xml中导入SpringMVC的相关依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li><li><p>在resources目录下创建spring-mvc.xml配置文件</p><p>&lt;!–hexoPostRenderEscape:<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;<a href="http://www.springframework.org/schema/mvc">http://www.springframework.org/schema/mvc</a>&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a>&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a></span></span><br><span class="hljs-tag"><span class="hljs-string">            <a href="http://www.springframework.org/schema/beans/spring-beans.xsd">http://www.springframework.org/schema/beans/spring-beans.xsd</a></span></span><br><span class="hljs-tag"><span class="hljs-string">         <a href="http://www.springframework.org/schema/mvc">http://www.springframework.org/schema/mvc</a></span></span><br><span class="hljs-tag"><span class="hljs-string">            <a href="http://www.springframework.org/schema/mvc/spring-mvc.xsd">http://www.springframework.org/schema/mvc/spring-mvc.xsd</a></span></span><br><span class="hljs-tag"><span class="hljs-string">         <a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a></span></span><br><span class="hljs-tag"><span class="hljs-string">            <a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a> &quot;</span>&gt;</span></p><p> <span class="hljs-comment">&lt;!–开启包扫描–&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.accp.*&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br> <span class="hljs-comment">&lt;!–开启mvc注解扫描–&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span></p></li></ol><p><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre>:hexoPostRenderEscape–&gt;</p><ol start="4"><li><p>编写web.xml配置文件</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">web-app</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span> <span class="hljs-comment">&lt;!--中文乱码过滤器--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span> <span class="hljs-comment">&lt;!-- 配置核心控制器 --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span> <span class="hljs-comment">&lt;!--配置异常处理页面--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">exception-type</span>&gt;</span>java.lang.Exception<span class="hljs-tag">&lt;/<span class="hljs-name">exception-type</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/error/error.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></li></ol><h3 id="2-SpringMVC常用注解"><a href="#2-SpringMVC常用注解" class="headerlink" title="2.SpringMVC常用注解"></a>2.SpringMVC常用注解</h3><ol><li>@Controller：定义了一个控制器类，使用它标记的类就是一个SpringMVC Controller 对象。</li><li>@RequestMapping：是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。<ul><li>value：   指定请求的实际地址，指定的地址可以是URI Template 模式</li><li>method： 指定请求的method类型， GET、POST、PUT、DELETE等</li><li>consumes： 指定处理请求的提交内容类型（Content-Type），例如application/json, text/html</li><li>produces:  指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回</li><li>params： 指定request中必须包含某些参数值是，才让该方法处理</li><li>headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求</li></ul></li><li>@Resource和@Autowired：都是做bean的注入时使用</li><li>@requestParam：主要用于在SpringMVC后台控制层获取参数，类似一种是request.getParameter(“name”)</li><li>@ResponseBody：该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</li></ol><h3 id="3-SpringMVC的跳转方式"><a href="#3-SpringMVC的跳转方式" class="headerlink" title="3.SpringMVC的跳转方式"></a>3.SpringMVC的跳转方式</h3><ol><li>请求转发：默认的controller的跳转方式为请求转发，相当于return “forward:路径”，默认forward:可以省略</li><li>重定向：通过配置 return “redirect:路径”来表示进行重定向</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/SpringMVC%E6%A1%86%E6%9E%B6%E2%80%94SpringMVC%E6%8B%93%E5%B1%95/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/SpringMVC%E6%A1%86%E6%9E%B6%E2%80%94SpringMVC%E6%8B%93%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC框架—SpringMVC拓展"><a href="#SpringMVC框架—SpringMVC拓展" class="headerlink" title="SpringMVC框架—SpringMVC拓展"></a>SpringMVC框架—SpringMVC拓展</h1><h3 id="1-SpringMvc的Model与ModelAndView"><a href="#1-SpringMvc的Model与ModelAndView" class="headerlink" title="1.SpringMvc的Model与ModelAndView"></a>1.SpringMvc的Model与ModelAndView</h3><ol><li>Model：用于接收数据传递到显示页面，需要作为参数传递<ul><li>addAttribute(String name,Object value)：添加键值对属性</li><li>addAttribute(Object obj)：将一个对象存到对象中，把该类名首字母小写作为key值</li><li>asMap()：将当前model转换为Map</li><li>mergeAttribute(Map &lt;String,?&gt; hashmap)：和addAttribute相同，但允许有相同的key值</li><li>containsAttribute(String name)：判断model中是否包含一个键值对，返回boolean</li></ul></li><li>ModelAndView：将控制器处理的结果数据返回到显示页面，作为返回类型使用，也可设置转向地址<ul><li>setViewName(String  path)：设置转向地址</li><li>addObject(String  name , Object value)：将控制器处理的结果数据返回到显示页面</li></ul></li></ol><h3 id="2-JSON数据传递处理"><a href="#2-JSON数据传递处理" class="headerlink" title="2.JSON数据传递处理"></a>2.JSON数据传递处理</h3><ol><li>在方法上加@ResponseBody，通过JSON.toJSONString()将数据转换为json格式</li><li>解决json数据传递乱码问题：在@RequestMapping里面加  produces = {“application/json;charset=UTF-8”}</li><li>解决json数据传递日期问题：在属性上加 @JSONField(format = “yyyy-MM-dd”)</li></ol><h3 id="3-SpringMVC文件上传"><a href="#3-SpringMVC文件上传" class="headerlink" title="3.SpringMVC文件上传"></a>3.SpringMVC文件上传</h3><ol><li><p>导入maven坐标</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li><li><p>springmvc.xml配置CommonsMultipartResolver</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--上传文件的最大大小，单位为字节 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;17367648787&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <span class="hljs-comment">&lt;!-- 上传文件的编码 --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></li><li><p>设置前端jsp页面：input的type设置为file，from表单的enctype设置为multipart/form-data</p></li><li><p>Controller层使用MultipartFile对象作为参数，接收前端发送过来的文件，将文件写入本地文件中</p><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;/uploadFile&quot;</span>)</span>public String upload<span class="hljs-constructor">File(@RequestParam(<span class="hljs-string">&quot;file&quot;</span>)</span> MultipartFile file, HttpServletRequest req)     throws IllegalStateException, IOException &#123; <span class="hljs-comment">// 判断文件是否为空，空则返回失败页面</span> <span class="hljs-keyword">if</span> (file.is<span class="hljs-constructor">Empty()</span>) &#123;     return <span class="hljs-string">&quot;失败页面&quot;</span>; &#125; <span class="hljs-comment">// 获取文件存储路径（绝对路径）</span> String path = req.get<span class="hljs-constructor">Session()</span>.get<span class="hljs-constructor">ServletContext()</span>.get<span class="hljs-constructor">RealPath(<span class="hljs-string">&quot;/WEB-INF/file&quot;</span>)</span>; <span class="hljs-comment">// 获取原文件名</span> String fileName = file.get<span class="hljs-constructor">OriginalFilename()</span>; <span class="hljs-comment">// 创建文件实例</span> File filePath = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-params">path</span>, <span class="hljs-params">fileName</span>)</span>; <span class="hljs-comment">// 如果文件目录不存在，创建目录</span> <span class="hljs-keyword">if</span> (!filePath.get<span class="hljs-constructor">ParentFile()</span>.exists<span class="hljs-literal">()</span>) &#123;     filePath.get<span class="hljs-constructor">ParentFile()</span>.mkdirs<span class="hljs-literal">()</span>;     <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;创建目录&quot;</span> + filePath); &#125; <span class="hljs-comment">// 写入文件</span> file.transfer<span class="hljs-constructor">To(<span class="hljs-params">filePath</span>)</span>; return <span class="hljs-string">&quot;成功页面&quot;</span>;&#125;</code></pre></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud微服务"><a href="#SpringCloud微服务" class="headerlink" title="SpringCloud微服务"></a>SpringCloud微服务</h1><h3 id="一-SpringCloud"><a href="#一-SpringCloud" class="headerlink" title="一.SpringCloud"></a>一.SpringCloud</h3><blockquote><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等。Spring Cloud 并不重复造轮子，而是将市面上开发得比较好的模块集成进去，进行封装，从而减少了各模块的开发成本。</p></blockquote><h3 id="二-SpringCloud的基础功能"><a href="#二-SpringCloud的基础功能" class="headerlink" title="二.SpringCloud的基础功能"></a>二.SpringCloud的基础功能</h3><ul><li>服务发现：Netflix Eureka</li><li>客户端负载均衡：Netflix Ribbon</li><li>断路器：Netflix Hystrix</li><li>服务网关：Netflix Zuul</li><li>声明式服务调用”Feign</li><li>分布式配置：Spring Cloud Config</li></ul><h3 id="三-SpringCloud引入Eureka"><a href="#三-SpringCloud引入Eureka" class="headerlink" title="三.SpringCloud引入Eureka"></a>三.SpringCloud引入Eureka</h3><blockquote><p>Spirng Cloud Eureka使用Netflix Eureka来实现服务注册与发现，由两个组件组成：Eureka服务端(Eureka Service)和Eureka客户端(Eureka Client)。而Eureka Client又分为服务提供者和服务消费者。</p></blockquote><ol><li><p>在项目中加入Eureka服务中心的依赖</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  Eureka服务中心  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li><li><p>写yml配置文件</p><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><span class="hljs-attr">port:</span> <span class="hljs-number">7070</span><span class="hljs-attr">spring:</span><span class="hljs-attr">application:</span> <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-service</span><span class="hljs-attr">eureka:</span><span class="hljs-attr">client:</span> <span class="hljs-attr">service-url:</span>     <span class="hljs-comment">#该注册中心指向另一个注册中心 互相注册。可配置多个 使用“,”分割</span>   <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:7070/eureka</span>    <span class="hljs-comment">#是否检索服务</span>   <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment">#是否向服务注册中心注册自己</span>   <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span> <span class="hljs-attr">instance:</span> <span class="hljs-comment">#开启后显示服务器地址</span> <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span> <span class="hljs-attr">ip-address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span></code></pre></li><li><p>在主启动类上加注解</p><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><span class="hljs-variable">@EnableEurekaServer</span> <span class="hljs-comment">//将项目作为SpringCloud中的注册中心</span>public class EurekaMain7070 &#123; <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;     <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(EurekaMain7070.class,args); &#125;&#125;</code></pre></li><li><p>将其他服务注册到Eureka注册中心</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  Eureka客户中心  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><span class="hljs-attr">spring:</span><span class="hljs-attr">application:</span> <span class="hljs-attr">name:</span> <span class="hljs-string">user-service</span><span class="hljs-attr">eureka:</span><span class="hljs-attr">client:</span>   <span class="hljs-comment">#表示向注册中心注册自己 默认为true</span> <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#是否从EurekaServer抓取已有的注册信息，默认为true,单节点无所谓,集群必须设置为true才能配合ribbon使用        负载均衡</span> <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">service-url:</span>   <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:7070/eureka</span> <span class="hljs-comment">#入驻地址</span></code></pre><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><span class="hljs-variable">@EnableEurekaClient</span>  <span class="hljs-comment">//让注册中心能够发现</span>public class UserMain8080 &#123; <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;     <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(UserMain8080.class,args); &#125;&#125;</code></pre></li></ol><p><strong>3.1 Eureka的治理机制</strong></p><ol><li>服务提供者<ul><li><strong>服务注册：</strong>启动的时候会通过发送REST请求的方式将自己注册到Eureka Server上，同时带上了自身服务的一些元数据信息</li><li><strong>服务续约：</strong>在注册完服务之后，服务提供者会维护一个心跳用来持续告诉Eureka Server: “我还活着 ” </li><li><strong>服务下线：</strong>当服务实例进行正常的关闭操作时，它会触发一个服务下线的REST请求给Eureka Server, 告诉服务注册中心：“我要下线了 ”</li></ul></li><li>服务消费者<ul><li><strong>获取服务：</strong>当我们启动服务消费者的时候，它会发送一个REST请求给服务注册中心，来获取上面注册的服务清单</li><li><strong>服务调用：</strong>服务消费者在获取服务清单后，通过服务名可以获得具体提供服务的实例名和该实例的元数据信息。在进行服务调用的时候，优先访问同处一个Zone中的服务提供方。</li></ul></li><li>服务注册中心<ul><li><strong>失效剔除：</strong>默认每隔一段时间（默认为60秒） 将当前清单中超时（默认为90秒）没有续约的服务剔除出去</li><li><strong>自我保护：</strong>EurekaServer 在运行期间，会统计心跳失败的比例在15分钟之内是否低于85%(通常由于网络不稳定导致)。 Eureka Server会将当前的实例注册信息保护起来， 让这些实例不会过期，尽可能保护这些注册信息</li></ul></li></ol><h3 id="四-SpringCloud引入Ribbon"><a href="#四-SpringCloud引入Ribbon" class="headerlink" title="四.SpringCloud引入Ribbon"></a>四.SpringCloud引入Ribbon</h3><blockquote><p>Ribbon 是一个基于Http和TCP的客服端负载均衡工具，它是基于Netflix Ribbon实现的。它不像spring cloud服务注册中心、配置中心、API网关那样独立部署，但是它几乎存在于每个spring cloud 微服务中。包括feign提供的声明式服务调用也是基于该Ribbon实现的。ribbon提供很多种负载均衡算法（默认的负载均衡策略是轮询），例如 轮询、随机、最少并发策略等等。甚至包含自定义的负载均衡算法。</p></blockquote><ol><li><p>在项目中加入Ribbon依赖</p><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--  ribbon负载均衡  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li><li><p>在yml配置文件中配置Ribbon负载均衡策略</p><pre><code class="hljs css"><span class="hljs-selector-tag">provider-service</span>:<span class="hljs-selector-tag">ribbon</span>: <span class="hljs-selector-tag">NFLoadBalancerRuleClassName</span>: <span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.netflix</span><span class="hljs-selector-class">.loadbalancer</span><span class="hljs-selector-class">.RandomRule</span></code></pre></li><li><p>在主启动类开启负载均衡</p><pre><code class="hljs less"><span class="hljs-variable">@Bean</span><span class="hljs-variable">@LoadBalanced</span>public RestTemplate getRestTemplate()&#123;<span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">RestTemplate</span>();&#125;</code></pre></li><li><p>进行测试</p><pre><code class="hljs less"><span class="hljs-variable">@RestController</span><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;user&quot;</span>)public class UserController &#123;<span class="hljs-variable">@Resource</span>private UserService userService;<span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;getUserById/&#123;id&#125;&quot;</span>) public User getUserById(<span class="hljs-variable">@PathVariable</span>(<span class="hljs-string">&quot;id&quot;</span>) Integer id)&#123;     <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">userService</span><span class="hljs-selector-class">.getUserById</span>(id); &#125;&#125;</code></pre><pre><code class="hljs aspectj"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123; <span class="hljs-meta">@Resource</span> <span class="hljs-keyword">private</span> RestTemplate restTemplate; <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(Integer id)</span> </span>&#123;    String url = <span class="hljs-string">&quot;http://provider-service/user/getUserById/&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">return</span> restTemplate.<span class="hljs-title">getForObject</span><span class="hljs-params">(url+id,User.class)</span></span>; &#125;&#125;</code></pre><p>多次刷新看到调用的端口在来回切换则成功实现负载均衡</p></li></ol><h3 id="五-SpringCloud引入Hystrix"><a href="#五-SpringCloud引入Hystrix" class="headerlink" title="五.SpringCloud引入Hystrix"></a>五.SpringCloud引入Hystrix</h3><blockquote><p>在高并发的情况下，由于单个服务的延迟，可能导致所有的请求都处于延迟状态，甚至在几秒钟就使服务处于负载饱和的状态，资源耗尽，直到不可用，最终导致这个分布式系统都不可用，这就是“雪崩”。Hystrix断路器可以防止一个应用程序多次试图执行一个操作，当某个服务单元发生故障（类似用电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝）， 向调用方返回一个错误响应， 而不是长时间的等待。这样就不会使得线程因调用故障服务被长时间占用不释放，避免了故障在分布式系统中的蔓延</p></blockquote><ol><li><p>在消费者pom中加入Hystrix的依赖包</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li><li><p>在主启动类加入注解</p><pre><code class="hljs aspectj"><span class="hljs-meta">@EnableHystrix</span></code></pre></li><li><p>测试是否生效</p><p>&lt;!–hexoPostRenderEscape:<pre><code class="hljs pgsql">@Override<br>@HystrixCommand(fallbackMethod = &quot;queryUserByIdFallback&quot;,  //失败后的回调函数<br>//每十次请求中失败率达到百分之三十则开启熔断，此时再调用该服务，则直接返回失败，直到十秒后重新检测该触发条件，判断是否把熔断器打开或者继续关闭</p><pre><code>         commandProperties = &amp;#123;         @HystrixProperty(&lt;span class=&quot;hljs-type&quot;&gt;name&lt;/span&gt;=&amp;quot;circuitBreaker.requestVolumeThreshold&amp;quot; ,&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;=&amp;quot;10&amp;quot;),         @HystrixProperty(&lt;span class=&quot;hljs-type&quot;&gt;name&lt;/span&gt;=&amp;quot;circuitBreaker.sleepWindowInMilliseconds&amp;quot; ,&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;=&amp;quot;10000&amp;quot;),         @HystrixProperty(&lt;span class=&quot;hljs-type&quot;&gt;name&lt;/span&gt;=&amp;quot;circuitBreaker.errorThresholdPercentage&amp;quot; ,&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;=&amp;quot;30&amp;quot;) &amp;#125;)</code></pre><p><span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> queryUserById(<span class="hljs-type">Integer</span> id) &#123;<br> long <span class="hljs-keyword">begin</span> = <span class="hljs-keyword">System</span>.currentTimeMillis();<br> <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>= restTemplate.getForObject(url+id, <span class="hljs-keyword">User</span>.<span class="hljs-keyword">class</span>);<br> long end = <span class="hljs-keyword">System</span>.currentTimeMillis();<br> logger.<span class="hljs-keyword">info</span>(&quot;访问用时&#123;&#125;&quot;,<span class="hljs-keyword">end</span>-<span class="hljs-keyword">begin</span>);<br> <span class="hljs-keyword">return</span> <span class="hljs-keyword">user</span>;<br>&#125;</p></li></ol><p>private <span class="hljs-keyword">User</span> queryUserByIdFallback(<span class="hljs-type">Integer</span> id)&#123;<br>    <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>    <span class="hljs-keyword">user</span>.setId(id);<br>    <span class="hljs-keyword">user</span>.setUserCode(&quot;查询用户信息出现异常&quot;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">user</span>;<br>&#125;</code></pre>:hexoPostRenderEscape–&gt;</p><h3 id="六-SpringCloud引入Feign"><a href="#六-SpringCloud引入Feign" class="headerlink" title="六.SpringCloud引入Feign"></a>六.SpringCloud引入Feign</h3><blockquote><p>Feign是一种声明式、模板化的HTTP客户端。在Spring Cloud中使用Feign, 我们可以做到使用HTTP请求远程服务时能与调用本地方法一样的编码体验，开发者完全感知不到这是远程方法，更感知不到这是个HTTP请求。</p></blockquote><ol><li><p>在服务调用者pom加入Feign依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li><li><p>在yml写配置文件</p><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><span class="hljs-attr">hystrix:</span> <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#开启Feign Hystrix 支持</span><span class="hljs-attr">httpclient:</span> <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#关闭httpclient</span><span class="hljs-attr">okhttp:</span> <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#开启okHttp</span></code></pre></li><li><p>在主启动类加入注解</p><pre><code class="hljs aspectj"><span class="hljs-meta">@EnableFeignClients</span></code></pre></li><li><p>使用Feign实现远程调用</p><pre><code class="hljs less"><span class="hljs-comment">/**</span><span class="hljs-comment">* value:指定调用哪个服务</span><span class="hljs-comment">* fallbackFactory:熔断器的降级提示</span><span class="hljs-comment">*/</span><span class="hljs-variable">@FeignClient</span>(value = <span class="hljs-string">&quot;provider-service&quot;</span>,fallback = UserFeignClientFallback.class)public interface UserFeignClient &#123; <span class="hljs-comment">//采用Feign我们可以使用SpringMVC的注解来对服务进行绑定！</span> <span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;/user/getUserById/&#123;id&#125;&quot;</span>) User userFeign(<span class="hljs-variable">@PathVariable</span>(<span class="hljs-string">&quot;id&quot;</span>) Integer id);&#125;</code></pre><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Feign中使用断路器</span><span class="hljs-comment"> * 这里主要是处理异常出错的情况(降级/熔断时服务不可用，fallback就会找到这里来)</span><span class="hljs-comment"> */</span>@Component<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> UserFeignClientFallback implements UserFeignClient &#123; @Override <span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> userFeign(<span class="hljs-type">Integer</span> id) &#123;     <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();     <span class="hljs-keyword">user</span>.setId(id);     <span class="hljs-keyword">user</span>.setUserCode(&quot;查询用户信息出现异常&quot;);     <span class="hljs-keyword">return</span> <span class="hljs-keyword">user</span>; &#125;&#125;</code></pre><pre><code class="hljs less"><span class="hljs-variable">@RestController</span><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;user&quot;</span>)public class UserController &#123; <span class="hljs-variable">@Resource</span> private UserFeignClient userFeignClient; <span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;feign/&#123;id&#125;&quot;</span>) public User userFeign(<span class="hljs-variable">@PathVariable</span>(<span class="hljs-string">&quot;id&quot;</span>) Integer id)&#123;     <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">userFeignClient</span><span class="hljs-selector-class">.userFeign</span>(id); &#125;&#125;</code></pre></li></ol><h3 id="七-SpringCloud引入Zuul"><a href="#七-SpringCloud引入Zuul" class="headerlink" title="七.SpringCloud引入Zuul"></a>七.SpringCloud引入Zuul</h3><blockquote><p>Zuul是在云平台上提供动态路由,监控,弹性,安全等边缘服务的框架。Zuul相当于是设备和Netflix流应用的 Web 网站后端所有请求的前门。Zuul和Eureka进行整合,将Zuul自身注册为Eureka服务治理下的应用,同时从Eureka中获得其他微服务的消息,也即以后的访问微服务都是通过Zuul跳转后获得</p><p>Zuul包含了对请求的路由和过滤两个最主要的功能:路由转发：接收一切外界请求，转发到后端的微服务上去。过滤器：在服务网关中可以完成一系列的横切功能，例如权限校验、限流以及监控等，这些都可以通过过滤器完成，路由转发也是通过过滤器实现的</p></blockquote><ol><li><p>新建项目在pom中加入依赖</p><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--  Zuul网关  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--  Eureka客户中心  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li><li><p>编写yml配置文件</p><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><span class="hljs-attr">port:</span> <span class="hljs-number">10080</span><span class="hljs-attr">spring:</span><span class="hljs-attr">application:</span><span class="hljs-comment">#服务的名称</span> <span class="hljs-attr">name:</span> <span class="hljs-string">zuul-service</span><span class="hljs-attr">eureka:</span><span class="hljs-attr">client:</span> <span class="hljs-attr">service-url:</span>   <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:9090/eureka</span> <span class="hljs-comment">#指定注册中心地址</span><span class="hljs-attr">zuul:</span><span class="hljs-attr">retryable:</span> <span class="hljs-literal">true</span><span class="hljs-attr">ignored-services:</span> <span class="hljs-bullet">-</span> <span class="hljs-string">provider-service</span>  <span class="hljs-comment">#忽略整个服务，对外提供接口</span></code></pre></li><li><p>编写主启动类</p><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><span class="hljs-variable">@EnableZuulProxy</span>public class ZuulMain10080 &#123; <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;     <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(ZuulMain10080.class); &#125;&#125;</code></pre></li><li><p>自定义过滤器</p><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ZuulFilter</span> </span>&#123;<span class="hljs-comment">/**</span><span class="hljs-comment">     * 返回字符串，代表过滤器的类型。包含以下4种：</span><span class="hljs-comment">     * pre：请求在被路由之前执行</span><span class="hljs-comment">     * routing：在路由请求时调用</span><span class="hljs-comment">     * post：在routing和error过滤器之后调用</span><span class="hljs-comment">     * error：处理请求时发生错误调用</span><span class="hljs-comment">    */</span> <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">filterType</span><span class="hljs-params">()</span> </span>&#123;     <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;pre&quot;</span>; &#125; <span class="hljs-comment">//通过返回的int值来定义过滤器的执行顺序，数字越小优先级越高。</span> <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">filterOrder</span><span class="hljs-params">()</span> </span>&#123;     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<span class="hljs-comment">//返回一个Boolean值，判断该过滤器是否需要执行。返回true执行，返回false不执行。</span> <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldFilter</span><span class="hljs-params">()</span> </span>&#123;     <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>; &#125;   <span class="hljs-comment">//过滤器的具体业务逻辑。</span> <span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ZuulException </span>&#123;     <span class="hljs-comment">// 登录校验逻辑。</span>     <span class="hljs-comment">// 1）获取Zuul提供的请求上下文对象</span>     RequestContext ctx = RequestContext.getCurrentContext();     <span class="hljs-comment">// 2) 从上下文中获取request对象</span>     HttpServletRequest req = ctx.getRequest();     <span class="hljs-comment">// 3) 从请求中获取token</span>     String token = req.getParameter(<span class="hljs-string">&quot;access-token&quot;</span>);     <span class="hljs-comment">// 4) 判断</span>     <span class="hljs-keyword">if</span>(token == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(token.trim()))&#123;         <span class="hljs-comment">// 没有token，登录校验失败，拦截</span>         ctx.setSendZuulResponse(<span class="hljs-keyword">false</span>);         <span class="hljs-comment">// 返回401状态码。也可以考虑重定向到登录页。</span>         ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());     &#125;     <span class="hljs-comment">// 校验通过，可以考虑把用户信息放入上下文，继续向后执行</span>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>; &#125;&#125;</code></pre></li></ol><h3 id="八-SpringCloud-Config"><a href="#八-SpringCloud-Config" class="headerlink" title="八.SpringCloud Config"></a>八.SpringCloud Config</h3><blockquote><p>随着业务的扩展，我们的服务会越来越多，越来越多。每个服务都有自己的配置文件。既然是配置文件，给我们配置的东西，那难免会有些改动的。</p><p>Spring Cloud Config项目是一个解决分布式系统的配置管理方案。它包含了Client和Server两个部分，server提供配置文件的存储、以接口的形式将配置文件的内容提供出去，client通过接口获取数据、并依据此数据初始化自己的应用。</p><p>简单来说，使用Spring Cloud Config就是将配置文件放到统一的位置管理(比如GitHub)，客户端通过接口去获取这些配置文件。在GitHub上修改了某个配置文件，应用加载的就是修改后的配置文件</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/SpringBoot%E6%A1%86%E6%9E%B6%E2%80%94%E5%88%9D%E5%A7%8BSpringBoot/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/SpringBoot%E6%A1%86%E6%9E%B6%E2%80%94%E5%88%9D%E5%A7%8BSpringBoot/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot框架—初始SpringBoot"><a href="#SpringBoot框架—初始SpringBoot" class="headerlink" title="SpringBoot框架—初始SpringBoot"></a>SpringBoot框架—初始SpringBoot</h1><h3 id="1-搭建SpringBoot"><a href="#1-搭建SpringBoot" class="headerlink" title="1.搭建SpringBoot"></a>1.搭建SpringBoot</h3><ol><li><p>使用idea快速搭建spring boot框架</p><p><img src="https://pic.downk.cc/item/5e76c7319d7d586a54735cad.png" alt="img"></p></li></ol><p>   <img src="https://pic.downk.cc/item/5e76c7549d7d586a54736640.png"></p><p>   选择需要的依赖</p><p>   <img src="https://pic.downk.cc/item/5e76c76f9d7d586a54736d76.png" alt="img"></p>   <pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- p6spy --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>p6spy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>p6spy<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--  热部署  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ol start="2"><li><p>创建测试代码</p><p>主程序类</p><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><span class="hljs-comment"> *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用</span><span class="hljs-comment"> */</span>@SpringBootApplication<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldMainApplication</span> &#123;</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;     SpringApplication.<span class="hljs-built_in">run</span>(HelloWorldMainApplication.class,args); &#125;&#125;</code></pre><p>mapper层</p><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-meta">@Mapper</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123; <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findUser</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>&lt;!–hexoPostRenderEscape:<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;<a href="http://mybatis.org/dtd/mybatis-3-mapper.dtd">http://mybatis.org/dtd/mybatis-3-mapper.dtd</a>&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.accp.mapper.UserMapper&quot;</span>&gt;</span></p><p> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span></p><pre><code> SELECT id,userCode,userName,userPassword,birthday FROM smbms_user</code></pre><p> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></p></li></ol><p><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre>:hexoPostRenderEscape–&gt;</p><p>   service层</p>   <pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserMapper userMapper;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findUser</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> userMapper.findUser();    &#125;&#125;</code></pre><p>   controller层</p>   <pre><code class="hljs less"><span class="hljs-variable">@RestController</span><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;user&quot;</span>)public class UserController &#123;    <span class="hljs-variable">@Autowired</span>    private UserServiceImpl userService;    <span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;findUser&quot;</span>)    public List&lt;User&gt; findUser() &#123;        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">userService</span><span class="hljs-selector-class">.findUser</span>();    &#125;&#125;</code></pre><ol start="3"><li><p>配置application.yml</p><pre><code class="hljs yaml"><span class="hljs-comment">#设置端口号</span><span class="hljs-attr">server:</span><span class="hljs-attr">port:</span> <span class="hljs-number">8088</span><span class="hljs-attr">spring:</span><span class="hljs-comment">#MYSQL连接信息</span><span class="hljs-attr">datasource:</span> <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.p6spy.engine.spy.P6SpyDriver</span> <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:p6spy:mysql://localhost:3306/smbms?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span> <span class="hljs-attr">username:</span> <span class="hljs-string">root</span> <span class="hljs-attr">password:</span> <span class="hljs-string">root</span> <span class="hljs-attr">hikari:</span>   <span class="hljs-attr">idle-timeout:</span> <span class="hljs-number">6000</span>   <span class="hljs-attr">maximum-pool-size:</span> <span class="hljs-number">50</span>   <span class="hljs-attr">minimum-idle:</span> <span class="hljs-number">10</span><span class="hljs-comment">#时间格式化</span><span class="hljs-attr">jackson:</span> <span class="hljs-attr">date-format:</span> <span class="hljs-string">yyyy-MM-dd</span><span class="hljs-comment">#mybatis配置:</span><span class="hljs-attr">mybatis:</span><span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.accp.pojo</span><span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:xml/mapper/*.xml</span></code></pre></li></ol><h3 id="2-SpringBoot中常用的一些注解"><a href="#2-SpringBoot中常用的一些注解" class="headerlink" title="2.SpringBoot中常用的一些注解"></a>2.SpringBoot中常用的一些注解</h3><ol><li>@SpringBootApplication 包含三个注解：@Configuration、@EnableAutoConfiguration、@ComponentScan</li><li>@Mapper：用于标注数据访问组件 即用在 Mapper接口层 它是<strong>mybatis</strong>的注解，Mapper不需要配置扫描地址</li><li>@Repository：用于标注数据访问组件 即用在 Mapper/Dao 接口层 它是<strong>spring</strong>的注解，需要在Spring中配置扫描地址</li><li>@Service：用于标注业务层</li><li>@RestController：用于标注控制层组件，包含@Controller和@ResponseBody</li><li>@MapperScan：通过此注解指定Mapper接口路径</li></ol><h3 id="3-SpringBoot权限控制"><a href="#3-SpringBoot权限控制" class="headerlink" title="3.SpringBoot权限控制"></a>3.SpringBoot权限控制</h3><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandlerInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">//获取用户是否登录，如果没有登录则带着提示消息回到登录页面</span>        Object user = request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);        <span class="hljs-keyword">if</span> (user==<span class="hljs-keyword">null</span>)&#123;            request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;没有权限请先登录&quot;</span>);            request.getRequestDispatcher(<span class="hljs-string">&quot;login.html&quot;</span>).forward(request,response);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/SpringBoot%E6%A1%86%E6%9E%B6%E2%80%94SprongBoot%E9%9B%86%E6%88%90swagger2/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/SpringBoot%E6%A1%86%E6%9E%B6%E2%80%94SprongBoot%E9%9B%86%E6%88%90swagger2/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot框架—SprongBoot集成swagger2"><a href="#SpringBoot框架—SprongBoot集成swagger2" class="headerlink" title="SpringBoot框架—SprongBoot集成swagger2"></a>SpringBoot框架—SprongBoot集成swagger2</h1><p>1.在pom.xml中导入依赖</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- swagger2 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- swagger-ui --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="2-编写SwaggerConfig类"><a href="#2-编写SwaggerConfig类" class="headerlink" title="2.编写SwaggerConfig类"></a>2.编写SwaggerConfig类</h3><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><span class="hljs-variable">@EnableSwagger2</span>public class SwaggerConfig &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 创建API应用</span><span class="hljs-comment">     * apiInfo() 增加API相关信息</span><span class="hljs-comment">     * 通过select()函数返回一个ApiSelectorBuilder实例,用来控制哪些接口暴露给Swagger来展现，</span><span class="hljs-comment">     * 本例采用指定扫描的包路径来定义指定要建立API的目录。</span><span class="hljs-comment">     * @return: Docket</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">@Bean</span>    public Docket createRestApi() &#123;        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">Docket</span>(DocumentationType.SWAGGER_2)                <span class="hljs-selector-class">.apiInfo</span>(apiInfo())                <span class="hljs-selector-class">.select</span>()                <span class="hljs-selector-class">.apis</span>(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.accp.controller&quot;</span>))                <span class="hljs-selector-class">.paths</span>(PathSelectors.any())                <span class="hljs-selector-class">.build</span>();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 创建该API的基本信息（这些基本信息会展现在文档页面中）</span><span class="hljs-comment">     * 访问地址：http://项目实际地址/swagger-ui.html</span><span class="hljs-comment">     * @return: ApiInfo</span><span class="hljs-comment">     */</span>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">ApiInfo</span> <span class="hljs-selector-tag">apiInfo</span>() &#123;        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">ApiInfoBuilder</span>()                <span class="hljs-selector-class">.title</span>(<span class="hljs-string">&quot;Spring Boot中使用Swagger2&quot;</span>)                <span class="hljs-selector-class">.description</span>(<span class="hljs-string">&quot;更多请关注http://www.baidu.com&quot;</span>)                <span class="hljs-selector-class">.termsOfServiceUrl</span>(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)                <span class="hljs-selector-class">.build</span>();    &#125;&#125;</code></pre><h3 id="3-使用Restful风格编写Controller"><a href="#3-使用Restful风格编写Controller" class="headerlink" title="3.使用Restful风格编写Controller"></a>3.使用Restful风格编写Controller</h3><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(<span class="hljs-meta-string">&quot;login&quot;</span>)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserService userService;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Result result;    <span class="hljs-meta">@ApiOperation(value=<span class="hljs-meta-string">&quot;查询&quot;</span>,notes = <span class="hljs-meta-string">&quot;查询用户列表&quot;</span>)</span>    <span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">&quot;findUser&quot;</span>)</span>    <span class="hljs-keyword">public</span> Result findUser() &#123;        List&lt;User&gt; user = userService.findUser();        result.setCode(<span class="hljs-number">1</span>);        result.setMsg(<span class="hljs-string">&quot;success&quot;</span>);        result.setData(user);        <span class="hljs-keyword">return</span> result;    &#125;    <span class="hljs-meta">@ApiOperation(value=<span class="hljs-meta-string">&quot;删除&quot;</span>,notes = <span class="hljs-meta-string">&quot;删除用户&quot;</span>)</span>    <span class="hljs-meta">@DeleteMapping(<span class="hljs-meta-string">&quot;del/&#123;redisKey&#125;&quot;</span>)</span>    <span class="hljs-keyword">public</span> void del(<span class="hljs-meta">@PathVariable</span> String redisKey) &#123;        userService.delCache(redisKey);    &#125;&#125;</code></pre><h3 id="4-启动项目访问Swagger—ui"><a href="#4-启动项目访问Swagger—ui" class="headerlink" title="4.启动项目访问Swagger—ui"></a>4.启动项目访问Swagger—ui</h3><p><img src="https://pic.downk.cc/item/5e76c6b29d7d586a54733260.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/SpringBoot%E6%A1%86%E6%9E%B6%E2%80%94SpringBoot%E9%9B%86%E6%88%90TK_MyBatis/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/SpringBoot%E6%A1%86%E6%9E%B6%E2%80%94SpringBoot%E9%9B%86%E6%88%90TK_MyBatis/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot框架—SpringBoot集成TK-MyBatis"><a href="#SpringBoot框架—SpringBoot集成TK-MyBatis" class="headerlink" title="SpringBoot框架—SpringBoot集成TK_MyBatis"></a>SpringBoot框架—SpringBoot集成TK_MyBatis</h1><h3 id="1-搭建Tk-MyBatis环境"><a href="#1-搭建Tk-MyBatis环境" class="headerlink" title="1.搭建Tk_MyBatis环境"></a>1.搭建Tk_MyBatis环境</h3><ol><li><p>在pom.xml导入坐标</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3-beta1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li></ol><ol start="2"><li><p>更改实体类</p><p>&lt;!–hexoPostRenderEscape:<pre><code class="hljs less"><span class="hljs-variable">@Data</span><br><span class="hljs-variable">@Table</span>(name = <span class="hljs-string">&quot;smbms_user&quot;</span>)<br>public class User implements Serializable &#123;</p><p> <span class="hljs-variable">@Id</span><br> <span class="hljs-variable">@GeneratedValue</span>(strategy = GenerationType.IDENTITY,generator = <span class="hljs-string">&quot;JDBC&quot;</span>)<br> private Integer id;</p><p> <span class="hljs-variable">@Column</span>(name = <span class="hljs-string">&quot;userCode&quot;</span>)<br> private String userCode;</p><p> <span class="hljs-variable">@Column</span>(name = <span class="hljs-string">&quot;userName&quot;</span>)<br> private String userName;</p><p> <span class="hljs-variable">@Column</span>(name = <span class="hljs-string">&quot;userPassword&quot;</span>)<br> private String userPassword;</p><p> <span class="hljs-variable">@Column</span>(name = <span class="hljs-string">&quot;birthday&quot;</span>)<br> private Date birthday;</p></li></ol><p>&#125;</code></pre>:hexoPostRenderEscape–&gt;</p><ol start="3"><li><p>继承Mapper&lt;&gt;类</p><pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>BaseMapper extends Mapper&lt;User&gt;&#123;&#125;</code></pre></li><li><p>可能需要在application.yml中写的配置</p><pre><code class="hljs groovy"><span class="hljs-attr">mybatis:</span>type-aliases-<span class="hljs-attr">package:</span> com.accp.pojomapper-<span class="hljs-attr">locations:</span> <span class="hljs-attr">classpath:</span>xml<span class="hljs-regexp">/mapper/</span>*.xml<span class="hljs-symbol">configuration:</span> map-underscore-to-camel-<span class="hljs-attr">case:</span> <span class="hljs-literal">true</span></code></pre></li></ol><h3 id="2-TK-MyBatis中的方法详解"><a href="#2-TK-MyBatis中的方法详解" class="headerlink" title="2.TK_MyBatis中的方法详解"></a>2.TK_MyBatis中的方法详解</h3><ol><li><p>INSERT方法</p><table><thead><tr><th align="left">方法名及返回类型</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">int insert(Object record)</td><td align="left">保存一个实体，null的属性也会保存，不会使用数据库默认值</td></tr><tr><td align="left">int insertSelective(Object record)</td><td align="left">保存一个实体，null的属性不会保存，会使用数据库默认值</td></tr></tbody></table></li><li><p>DELETE方法</p><table><thead><tr><th align="left">方法名及返回类型</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">int delete(Object record)</td><td align="left">根据实体属性作为条件进行删除，查询条件使用等号</td></tr><tr><td align="left">int deleteByPrimaryKey(Object key)</td><td align="left">根据主键字段进行删除，方法参数必须包含完整的主键属性</td></tr></tbody></table></li><li><p>UPDATE方法</p><table><thead><tr><th align="left">方法名及返回类型</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">int updateByPrimaryKey(Object record)</td><td align="left">根据主键更新实体全部字段，null值会被更新</td></tr><tr><td align="left">int updateByPrimaryKeySelective(Object record)</td><td align="left">根据主键更新属性不为null的值</td></tr></tbody></table></li><li><p>SELECT方法</p><table><thead><tr><th align="left">方法名及返回类型</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">List select(Object record)</td><td align="left">根据实体中的属性值进行查询，查询条件使用等号</td></tr><tr><td align="left">List selectAll()</td><td align="left">查询全部结果，select(null)方法能达到同样的效果</td></tr><tr><td align="left">int selectCount(Object record)</td><td align="left">根据实体中的属性查询总数，查询条件使用等号</td></tr><tr><td align="left">Object selectOne(Object record)</td><td align="left">根据实体中的属性进行查询，只能有一个返回值，有多个结果是抛出异常，查询条件使用等号</td></tr><tr><td align="left">Object selectByPrimaryKey(Object key)</td><td align="left">根据主键字段进行查询，方法参数必须包含完整的主键属性，查询条件使用等号</td></tr><tr><td align="left">boolean existsWithPrimaryKey(Object key)</td><td align="left">通过主键查询此主键是否存在</td></tr></tbody></table></li><li><p>Examle条件方法</p><table><thead><tr><th align="left">方法名及返回类型</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">int deleteByExample(Object example)</td><td align="left">根据Example条件删除数据</td></tr><tr><td align="left">int updateByExample(Object record, Object example)</td><td align="left">根据Example条件更新实体record包含的全部属性，null值会被更新</td></tr><tr><td align="left">int updateByExampleSelective(Object record, Object example)</td><td align="left">根据Example条件更新实体record包含的不是null的属性值</td></tr><tr><td align="left">List selectByExample(Object example)</td><td align="left">根据Example条件进行查询</td></tr><tr><td align="left">Object selectOneByExample(Object example)</td><td align="left">根据Example条件进行查询，若有多条数据则抛出异常</td></tr><tr><td align="left">int selectCountByExample(Object example)</td><td align="left">根据Example条件进行查询总数</td></tr></tbody></table></li><li><p>分页的方法</p><table><thead><tr><th align="left">方法名及返回类型</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">List selectByRowBounds(Object record, RowBounds rowBounds)</td><td align="left">根据实体属性和RowBounds进行分页查询</td></tr><tr><td align="left">List selectByExampleAndRowBounds(Object example, RowBounds rowBounds)</td><td align="left">根据example条件和RowBounds进行分页查询</td></tr></tbody></table></li></ol><h3 id="3-TK-MyBatis中的方法示例"><a href="#3-TK-MyBatis中的方法示例" class="headerlink" title="3.TK_MyBatis中的方法示例"></a>3.TK_MyBatis中的方法示例</h3><pre><code class="hljs php">@Service<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BillServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BillService</span> </span>&#123;    @Resource    <span class="hljs-keyword">private</span> BillMapper billMapper;    @Override    <span class="hljs-keyword">public</span> <span class="hljs-keyword">List</span>&lt;Bill&gt; findBill() &#123;        <span class="hljs-keyword">return</span> billMapper.selectAll();    &#125;    @Override    <span class="hljs-keyword">public</span> Bill findBillById(<span class="hljs-keyword">Integer</span> id) &#123;        <span class="hljs-keyword">return</span> billMapper.selectByPrimaryKey(id);    &#125;      <span class="hljs-comment">/** </span><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: TK_Mybatis根据条件模糊查询 </span><span class="hljs-comment">    * <span class="hljs-doctag">@Param</span>: [productName] </span><span class="hljs-comment">    * <span class="hljs-doctag">@return</span>: List&lt;Bill&gt; </span><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span>: Mr.Du</span><span class="hljs-comment">    */</span>     @Override    <span class="hljs-keyword">public</span> <span class="hljs-keyword">List</span>&lt;Bill&gt; findBillExample(<span class="hljs-keyword">String</span> productName) &#123;        Example example = <span class="hljs-keyword">new</span> Example(Bill.<span class="hljs-keyword">class</span>);        example.createCriteria()                .andLike(<span class="hljs-string">&quot;productName&quot;</span>,<span class="hljs-string">&#x27;%&#x27;</span>+productName+<span class="hljs-string">&#x27;%&#x27;</span>);        <span class="hljs-keyword">return</span> billMapper.selectByExample(example);    &#125;      <span class="hljs-comment">/** </span><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: TK_Mybatis根据条件模糊查询 </span><span class="hljs-comment">    * <span class="hljs-doctag">@Param</span>: [productName,productDesc] </span><span class="hljs-comment">    * <span class="hljs-doctag">@return</span>: List&lt;Bill&gt; </span><span class="hljs-comment">    * <span class="hljs-doctag">@Author</span>: Mr.Du</span><span class="hljs-comment">    */</span>     @Override    <span class="hljs-keyword">public</span> <span class="hljs-keyword">List</span>&lt;Bill&gt; selectBillExample(<span class="hljs-keyword">String</span> productName,<span class="hljs-keyword">String</span> productDesc) &#123;        Example example = <span class="hljs-keyword">new</span> Example(Bill.<span class="hljs-keyword">class</span>);        example.createCriteria()                .andEqualTo(<span class="hljs-string">&quot;productName&quot;</span>,productName)                .andEqualTo(<span class="hljs-string">&quot;productDesc&quot;</span>,productDesc);        <span class="hljs-keyword">return</span> billMapper.selectByExample(example);    &#125; &#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/Mybatis%E6%A1%86%E6%9E%B6%E2%80%94%E5%8A%A8%E6%80%81SQL/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/Mybatis%E6%A1%86%E6%9E%B6%E2%80%94%E5%8A%A8%E6%80%81SQL/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis框架—动态SQL"><a href="#Mybatis框架—动态SQL" class="headerlink" title="Mybatis框架—动态SQL"></a>Mybatis框架—动态SQL</h1><h3 id="1-实现动态sql的元素"><a href="#1-实现动态sql的元素" class="headerlink" title="1.实现动态sql的元素"></a>1.实现动态sql的元素</h3><ul><li>if：利用if实现简单的条件选择</li><li>choose(when，otherwise)：相当于java中的switch语句，通常与when和otherwise搭配</li><li>where：简化SQL语句中的where的条件判断</li><li>set：解决动态更新语句</li><li>trim：可以灵活的去除多余的关键字</li><li>foreach：迭代一个集合，通常用于in条件</li></ul><h3 id="2-使用if-where实现多条件查询"><a href="#2-使用if-where实现多条件查询" class="headerlink" title="2.使用if-where实现多条件查询"></a>2.使用if-where实现多条件查询</h3><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByUserName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.accp.pojo.user&quot;</span>&gt;</span></span><span class="xml">    SELECT * FROM smbms_user u</span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userRole!=null and userRole!=&#x27;&#x27;&quot;</span>&gt;</span></span><span class="xml">            AND u.`userRole`=#</span><span class="hljs-template-variable">&#123;userRole&#125;</span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName!=null and userName!=&#x27;&#x27;&quot;</span>&gt;</span></span><span class="xml">            AND u.`userName` LIKE CONCAT(&#x27;%&#x27;,#</span><span class="hljs-template-variable">&#123;userName&#125;</span><span class="xml">,&#x27;%&#x27;)</span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span></code></pre><h3 id="3-使用if-trim实现多条件查询"><a href="#3-使用if-trim实现多条件查询" class="headerlink" title="3.使用if-trim实现多条件查询"></a>3.使用if-trim实现多条件查询</h3><ul><li>prefix：前缀，作用是通过自动识别是否有返回值后，在trim包含的内容上加上前缀，如此处的where</li><li>suffix：后缀：作用是在trim包含的内容上加上后缀</li><li>prefixOverrides：对于trim包含内容的首尾部进行指定的内容（如此处的 and ）的忽略</li><li>suffixOverrides：对于trim包含内容的首尾部进行指定内容的忽略</li></ul><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByUserNameOrTrim&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.accp.pojo.user&quot;</span>&gt;</span></span><span class="xml">    SELECT * FROM smbms_user u</span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;and&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userRole!=null and userRole!=&#x27;&#x27;&quot;</span>&gt;</span></span><span class="xml">            AND u.`userRole`=#</span><span class="hljs-template-variable">&#123;userRole&#125;</span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName!=null and userName!=&#x27;&#x27;&quot;</span>&gt;</span></span><span class="xml">            AND u.`userName` LIKE CONCAT(&#x27;%&#x27;,#</span><span class="hljs-template-variable">&#123;userName&#125;</span><span class="xml">,&#x27;%&#x27;)</span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span></code></pre><h3 id="4-使用if-trim进行修改操作"><a href="#4-使用if-trim进行修改操作" class="headerlink" title="4.使用if+trim进行修改操作"></a>4.使用if+trim进行修改操作</h3><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.accp.pojo.user&quot;</span>&gt;</span></span><span class="xml">    UPDATE smbms_user</span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;set&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName!=null&quot;</span>&gt;</span></span><span class="xml">            userName=#</span><span class="hljs-template-variable">&#123;userName&#125;</span><span class="xml">,</span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userPassword!=null&quot;</span>&gt;</span></span><span class="xml">            userPassword=#</span><span class="hljs-template-variable">&#123;userPassword&#125;</span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><span class="xml">    where id=#</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span></code></pre><h3 id="5-使用if-set实现更新操作"><a href="#5-使用if-set实现更新操作" class="headerlink" title="5.使用if+set实现更新操作"></a>5.使用if+set实现更新操作</h3><pre><code class="hljs dust"><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.accp.pojo.user&quot;</span>&gt;</span></span><span class="xml">    UPDATE smbms_user</span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName!=null&quot;</span>&gt;</span></span><span class="xml">            userName=#</span><span class="hljs-template-variable">&#123;userName&#125;</span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userPassword!=null&quot;</span>&gt;</span></span><span class="xml">            userPassword=#</span><span class="hljs-template-variable">&#123;userPassword&#125;</span><span class="xml">,</span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">        where id=#</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span></code></pre><h3 id="6-使用foreach完成复杂查询"><a href="#6-使用foreach完成复杂查询" class="headerlink" title="6.使用foreach完成复杂查询"></a>6.使用foreach完成复杂查询</h3><ul><li>item：表示集合中每一个元素进行迭代的别名，如此处的  id</li><li>index：指定一个名称，用于表示在迭代过程中，每次迭代的位置</li><li>open：表示该语句以什么开始，既然是in条件语句 所以此处从  “(“  开始</li><li>close：表示该语句以什么结束，既然是in条件语句 所以此处从  “)”  结束</li><li>separator：表示在每次进行迭代的时候以什么符号进行分割，既然是in条件语句 所以此处以  “,”  进行分割</li><li>collection：要遍历的集合名称，数据类型有  List  ,  Array  ,  Map  三种类型，该参数为必选项；</li></ul><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">select</span> id=&quot;findUserByUserRole&quot; resultType=&quot;com.accp.pojo.user&quot;&gt;    <span class="hljs-keyword">SELECT</span> u.`id`,u.`userName`,u.`userCode` <span class="hljs-keyword">FROM</span> smbms_user u <span class="hljs-keyword">WHERE</span> userRole <span class="hljs-keyword">IN</span>    &lt;<span class="hljs-keyword">foreach</span> collection=&quot;userRoles&quot; <span class="hljs-keyword">open</span>=&quot;(&quot; separator=&quot;,&quot; <span class="hljs-keyword">close</span>=&quot;)&quot; item=&quot;id&quot;&gt;        #&#123;id&#125;    &lt;/<span class="hljs-keyword">foreach</span>&gt;&lt;/<span class="hljs-keyword">select</span>&gt;List&lt;<span class="hljs-keyword">user</span>&gt; findUserByUserRole(@Param(&quot;userRoles&quot;)List&lt;<span class="hljs-type">Integer</span>&gt; userRoles);</code></pre><h3 id="7-使用choose-when-、otherwise-进行查询"><a href="#7-使用choose-when-、otherwise-进行查询" class="headerlink" title="7.使用choose(when 、otherwise)进行查询"></a>7.使用choose(when 、otherwise)进行查询</h3><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">select</span> id=&quot;selectProviderByChoose&quot; resultType=&quot;com.accp.pojo.provider&quot;&gt;    <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> smbms_provider <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span>    &lt;choose&gt;        &lt;<span class="hljs-keyword">when</span> test=&quot;proCode!=null&quot;&gt;<span class="hljs-keyword">AND</span> proCode <span class="hljs-keyword">LIKE</span> CONCAT(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;proCode&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)&lt;/<span class="hljs-keyword">when</span>&gt;        &lt;<span class="hljs-keyword">when</span> test=&quot;proName!=null&quot;&gt;<span class="hljs-keyword">AND</span> proName <span class="hljs-keyword">LIKE</span> CONCAT(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;proName&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)&lt;/<span class="hljs-keyword">when</span>&gt;        &lt;<span class="hljs-keyword">when</span> test=&quot;proContact!=null&quot;&gt;<span class="hljs-keyword">AND</span> proContact <span class="hljs-keyword">LIKE</span> CONCAT(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;proContact&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)&lt;/<span class="hljs-keyword">when</span>&gt;        &lt;otherwise&gt;            <span class="hljs-keyword">AND</span> YEAR(creationDate)=YEAR(#&#123;creationDate&#125;)        &lt;/otherwise&gt;    &lt;/choose&gt;&lt;/<span class="hljs-keyword">select</span>&gt;</code></pre><ul><li>when：当其test条件满足时，就会输出when元素中的内容，一旦有when条件满足是就会跳出choose</li><li>otherwise：当所有when条件都不满足时候，就会输出otherwise元素中的内容</li></ul><h3 id="8-使用if-trim进行动态添加操作"><a href="#8-使用if-trim进行动态添加操作" class="headerlink" title="8.使用if+trim进行动态添加操作"></a>8.使用if+trim进行动态添加操作</h3><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBill&quot;</span>&gt;</span></span><span class="xml">        INSERT INTO smbms_bill</span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;billCode!=null and billCode!=&#x27;&#x27;&quot;</span>&gt;</span>billCode,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;productName!=null and productName!=&#x27;&#x27;&quot;</span>&gt;</span>productName,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;productDesc!=null and productDesc!=&#x27;&#x27;&quot;</span>&gt;</span>productDesc<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;VALUES(&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;billCode!=null and billCode!=&#x27;&#x27;&quot;</span>&gt;</span>#</span><span class="hljs-template-variable">&#123;billCode&#125;</span><span class="xml">,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;productName!=null and  productName!=&#x27;&#x27;&quot;</span>&gt;</span>#</span><span class="hljs-template-variable">&#123;productName&#125;</span><span class="xml">,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;productDesc!=null and productDesc!=&#x27;&#x27;&quot;</span>&gt;</span>#</span><span class="hljs-template-variable">&#123;productDesc&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span></code></pre><h3 id="9-使用PageHelper分页查询"><a href="#9-使用PageHelper分页查询" class="headerlink" title="9.使用PageHelper分页查询"></a>9.使用PageHelper分页查询</h3><ol><li><p>在pom.xml中导入坐标</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页依赖包--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.jsqlparser<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsqlparser<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li><li><p>在mybatis主配置文件mybatis-config.xml中配置分页插件</p><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--配置分页插件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></code></pre></li><li><p>在mapper.xml文件中写SQL语句</p><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">select</span> id=&quot;selectProviderByPageHelper&quot;  resultType=&quot;com.accp.pojo.provider&quot;&gt; <span class="hljs-keyword">SELECT</span> id,proName,proCode,creationDate <span class="hljs-keyword">FROM</span> smbms_provider <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> creationDate <span class="hljs-keyword">DESC</span>&lt;/<span class="hljs-keyword">select</span>&gt;</code></pre></li><li><p>写测试类</p><pre><code class="hljs reasonml">@Testpublic void select<span class="hljs-constructor">ProviderByPageHelper()</span>&#123; userMapper mapper = sqlSession.get<span class="hljs-constructor">Mapper(<span class="hljs-params">userMapper</span>.<span class="hljs-params">class</span>)</span>; <span class="hljs-comment">/*  第一个参数从第几页开始，第二个参数每页显示多少条*/</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageHelper</span>.</span></span>start<span class="hljs-constructor">Page(2,5)</span>; List&lt;provider&gt; providerList = mapper.select<span class="hljs-constructor">ProviderByPageHelper()</span>; PageInfo&lt;provider&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(providerList); List&lt;provider&gt; <span class="hljs-built_in">list</span> = pageInfo.get<span class="hljs-constructor">List()</span>; <span class="hljs-keyword">for</span> (Product provider : <span class="hljs-built_in">list</span>) &#123;         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(provider);     &#125;&#125;</code></pre></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/Mybatis%E6%A1%86%E6%9E%B6%E2%80%94%E5%88%9D%E5%A7%8BMybatis/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/Mybatis%E6%A1%86%E6%9E%B6%E2%80%94%E5%88%9D%E5%A7%8BMybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis框架及ORM"><a href="#Mybatis框架及ORM" class="headerlink" title="Mybatis框架及ORM"></a>Mybatis框架及ORM</h1><h4 id="1-Mybatis框架简介"><a href="#1-Mybatis框架简介" class="headerlink" title="1. Mybatis框架简介"></a>1. Mybatis框架简介</h4><p>​                Mybatis是一个开源的数据持久层框架，它的内部封装了通过了JDBC访问数据库的操作，支持普通的SQL查        询、储存过程和高级映射，几乎消除了所有的JDBC代码和参数的手工设置以及结果集的检索。其主要思想是将SQL        语句剥离出来，配置在配置文件中，实现SQL的灵活配置</p><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><p>​                ORM(Object / Relational Mapping)即对象/关系映射，是一种持久化技术，他在对象模型和关系型数据库之间建        立关系，并且提供一种机制，通过JavaBean对象去操作数据库表中的数据。</p><h3 id="2-Mybatis环境搭建"><a href="#2-Mybatis环境搭建" class="headerlink" title="2.Mybatis环境搭建"></a>2.Mybatis环境搭建</h3><ol><li><p>创建maven项目，在pom.xml文件中导入Mybatis的坐标</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li><li><p>编写Mybatis核心配置文件 mybatis-config.xml（文件节点有一定顺序，不按照顺序排位会报错）</p><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--引入jdbc.properties文件--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--给全限定类名配置别名--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.accp.pojo.user&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAlias</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--配置Mybatis多套运行环境--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span></span><span class="xml">            <span class="hljs-comment">&lt;!--配置事务管理，采用JDBC的事务管理--&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span></span><span class="xml">            <span class="hljs-comment">&lt;!--POOLED：mybatis自带的数据源      JNDI：基于tomcat的数据源--&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;driver&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;url&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;username&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;password&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--将mapper文件到配置文件中--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/accp/dao/userMapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><span class="xml">        <span class="hljs-comment">&lt;!--&lt;package name=&quot;com/accp&quot;/&gt;--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span></code></pre><p>mybatis-config.xml文件的几个常用元素作用如下：</p><ul><li>configuration：配置文件的根节点元素</li><li>properties：通过resource属性从外部指定properties文件，该属性文件描述数据库连接的相关配置</li><li>settings：设置mybatis运行中的一些行为，例如使用log4j实现日志功能</li><li>environments：表示配置mybatis多套运行环境，将SQL映射到不同的数据库上，该元素节点下可以配置多个environment子元素节点，但必须通过default指定一个默认运行环境</li><li>environment：配置mybatis的一套运行环境，需要指定运行环境ID、事务管理、数据源配置等相关信息</li><li>mappers：作用是告诉mybatis去哪里找SQL映射文件</li><li>mapper：mappers的子元素节点，具体指SQL映射文件的路径，其中resource属性表示SQL映射文件的</li></ul></li><li><p>创建实体类</p></li><li><p>创建dao接口</p></li><li><p>创建SQL映射文件mapper.xml</p><p>&lt;!–hexoPostRenderEscape:<pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span></span><br><span class="xml">    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;<a href="http://mybatis.org/dtd/mybatis-3-mapper.dtd">http://mybatis.org/dtd/mybatis-3-mapper.dtd</a>&quot;&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.accp.dao.userMapper&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getPro&quot;</span>&gt;</span></span><br><span class="xml">        select u.id ,u.userName,u.userPassword</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span></span></p></li></ol><p><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;getPro&quot;</span>/&gt;</span>FROM smbms_user u </span><br><span class="xml">        where u.<code>userName</code> LIKE CONCAT(&#x27;%&#x27;,#</span><span class="hljs-template-variable">&#123;userName&#125;</span><span class="xml">,&#x27;%&#x27;)</span><br><span class="xml">        and userPassword=#</span><span class="hljs-template-variable">&#123;userPassword&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span></code></pre>:hexoPostRenderEscape–&gt;</p><p>   mapper.xml定义了SQL语句，其中各元素含义如下</p><ul><li>mapper：映射文件的根元素节点，只有一个属性namespace用于区分不同的mapper，全局唯一</li><li>sql：用于提取多余的SQL语句片段。 只要调用标签就可以了，refid属性值填标签的id属性值 </li><li>select：表示查询语句。<ul><li>id属性表示该命名空间下唯一标识符，</li><li>resultType属性表示SQL语句返回值类型</li><li>parameterType表示传入的参数类型：基本数据类型：int,string,long,Date;    复杂数据类型：类和Map</li></ul></li></ul><ol start="6"><li><p>编写测试类</p><pre><code class="hljs reasonml"><span class="hljs-keyword">try</span> &#123;  <span class="hljs-comment">//1.读取配置文件</span> InputStream <span class="hljs-keyword">in</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Resources</span>.</span></span>get<span class="hljs-constructor">ResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>)</span>;<span class="hljs-comment">//2.创建SqlSessionFactory工厂</span> SqlSessionFactoryBuilder builder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SqlSessionFactoryBuilder()</span>;SqlSessionFactory factory = builder.build(<span class="hljs-keyword">in</span>); <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span> SqlSession sqlSession = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session()</span>;<span class="hljs-comment">//4.使用SqlSession创建Dao接口对象</span> userMapper mapper = sqlSession.get<span class="hljs-constructor">Mapper(<span class="hljs-params">userMapper</span>.<span class="hljs-params">class</span>)</span>;<span class="hljs-comment">//5.使用代理对象执行方法</span> List&lt;user&gt; users = mapper.get<span class="hljs-constructor">Users()</span>; <span class="hljs-keyword">for</span> (user user : users) &#123;      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(user);  &#125;&#125; catch (IOException e) &#123; e.print<span class="hljs-constructor">StackTrace()</span>;&#125;finally &#123; <span class="hljs-comment">//6.关闭sqlSession对象</span> <span class="hljs-keyword">if</span> (null!=sqlSession)&#123;     sqlSession.close<span class="hljs-literal">()</span>; &#125;&#125;</code></pre></li></ol><h3 id="3-Mybatis的基本要素——核心思想"><a href="#3-Mybatis的基本要素——核心思想" class="headerlink" title="3.Mybatis的基本要素——核心思想"></a>3.Mybatis的基本要素——核心思想</h3><h4 id="3-1：SqlSessionFactoryBuilder"><a href="#3-1：SqlSessionFactoryBuilder" class="headerlink" title="3.1：SqlSessionFactoryBuilder"></a>3.1：SqlSessionFactoryBuilder</h4><ul><li>SqlSessionFactoryBuilder的作用：负责构建SqlSessionFactory（通过读取xml文件和编程构造方式），并且提供多个build()方法的重载</li><li>SqlSessionFactoryBuilder的生命周期和作用域：SqlSessionFactoryBuilder最大特点是：用过即丢。一旦创建SqlSessionFactory对象后，这个类就不需要存在了，因此SqlSessionFactoryBuilder的最佳范围就是存在于方法体，也就是局部变量</li></ul><h4 id="3-2：SqlSessionFactory"><a href="#3-2：SqlSessionFactory" class="headerlink" title="3.2：SqlSessionFactory"></a>3.2：SqlSessionFactory</h4><ul><li>SqlSessionFactory的作用：创建SqlSession示例的工厂，通过SqlSessionFactory提供的openSession()方法来获取SqlSession实例。openSession(）方法的参数为Boolean值时，若传入true时表示关闭事务管理，自动提交；否则相反。若不传入参数则默认参数为true</li><li>SqlSessionFactory的生命周期和作用域：SqlSessionFactory对象一旦创建，就会在整个应用运行过程中始终存在，没有理由去销毁或在创建它，并且在应用运行过程中也不建议多次创建SqlSessionFactory。因此SqlSessionFactory最佳作用域是Application</li></ul><h4 id="3-3：SqlSession"><a href="#3-3：SqlSession" class="headerlink" title="3.3：SqlSession"></a>3.3：SqlSession</h4><ul><li>SqlSession的作用：用于持久化操作的对象，类似于JDBC中的Connection。它提供了面向数据库执行SQL命令所需要的方法，可以通过SqlSession实例直接运行到以映射的SQL语句</li><li>SqlSession的作用域和生命周期：SqlSession对应着一次数据库会话。由于数据库会话不是永久的，因此SqlSession的生命周期也不应该是永久的。相反，在每次访问数据库时都需要创建它，创建SqlSession的地方只有一个，那就是SqlSessionFactory提供的openSession()方法。每个线程都有自己的SqlSession实例，且不能被共享，也不是线程安全的。因此最佳的作用域范围是request作用域或者方法体作用域内。关闭SqlSession非常重要</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/Mybatis%E6%A1%86%E6%9E%B6%E2%80%94SQL%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/Mybatis%E6%A1%86%E6%9E%B6%E2%80%94SQL%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis框架—SQL映射文件"><a href="#Mybatis框架—SQL映射文件" class="headerlink" title="Mybatis框架—SQL映射文件"></a>Mybatis框架—SQL映射文件</h1><h3 id="1-SQL映射文件的几个顶级元素配置"><a href="#1-SQL映射文件的几个顶级元素配置" class="headerlink" title="1.SQL映射文件的几个顶级元素配置"></a>1.SQL映射文件的几个顶级元素配置</h3><ol><li><p>mapper：映射文件的根元素节点，只有一个namespace属性，其作用是用于区分不同的mapper；绑定DAO接口，即面向接口编程，当namespace绑定某一接口后，可以不用写该接口的实现类，mybatis会通过接口的完整限定类名查找到对应的mapper配置来执行SQL语句。因此namespace的命名必须要跟接口同名</p></li><li><p>cache：配置给定命名空间的缓存</p></li><li><p>acahe-ref：从其他命名空间引用缓存配置</p></li><li><p>resultMap：用来描述数据库结果集和对象的对应关系</p></li><li><p>sql：可重用的SQL块，也可以被其他语句引用</p></li></ol><ol start="6"><li>insert：映射插入语句</li></ol>   <pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertProvider&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.accp.pojo.provider&quot;</span>&gt;</span></span><span class="xml">    INSERT INTO `smbms_provider` (proCode,proName,proDesc)</span><span class="xml">    VALUES (#</span><span class="hljs-template-variable">&#123;proCode&#125;</span><span class="xml">, #</span><span class="hljs-template-variable">&#123;proName&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;proDesc&#125;</span><span class="xml">)</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span></code></pre><ol start="7"><li>update：映射更新语句</li></ol>   <pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateProvider&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.accp.pojo.provider&quot;</span>&gt;</span></span><span class="xml">    UPDATE `smbms_provider` SET modifyDate=#</span><span class="hljs-template-variable">&#123;modifyDate&#125;</span><span class="xml">,modifyBy=#</span><span class="hljs-template-variable">&#123;modifyBy&#125;</span><span class="xml"> WHERE id=#</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span></code></pre><ol start="8"><li>delete：映射删除语句</li></ol>   <pre><code class="hljs n1ql">&lt;<span class="hljs-keyword">delete</span> id=<span class="hljs-string">&quot;deleteById&quot;</span> parameterType=<span class="hljs-string">&quot;com.accp.pojo.provider&quot;</span>&gt;    <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-symbol">`smbms_provider`</span> <span class="hljs-keyword">WHERE</span> id=#&#123;id&#125;&lt;/<span class="hljs-keyword">delete</span>&gt;</code></pre><ol start="9"><li>select：映射查询语句</li></ol>   <pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">select</span> id=&quot;selectBill&quot; resultType=&quot;com.accp.pojo.bill&quot;&gt;     <span class="hljs-keyword">SELECT</span> b.*,p.*     <span class="hljs-keyword">FROM</span> smbms_bill b, smbms_provider p     <span class="hljs-keyword">WHERE</span> b.providerId=p.`id`     <span class="hljs-keyword">AND</span> b.providerId=#&#123;providerId&#125;     <span class="hljs-keyword">AND</span> b.`isPayment`=#&#123;isPayment&#125;     <span class="hljs-keyword">AND</span> b.productName <span class="hljs-keyword">like</span> CONCAT (<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;productName&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)&lt;/<span class="hljs-keyword">select</span>&gt;</code></pre><ol start="10"><li><p>​</p></li><li><h3 id="2-resultType和resultMap的关联和区别"><a href="#2-resultType和resultMap的关联和区别" class="headerlink" title="2.resultType和resultMap的关联和区别"></a>2.resultType和resultMap的关联和区别</h3></li><li><ol><li>resultType表示返回类型，包括是基础数据类型和复杂数据类型</li><li>resultMap则是对应外部resultMap定义的引用，对应外部resultMap的id，表示返回结果映射到哪一个resultMap上</li><li>resultType和resultMap的关联：                                                                                                                                           在mybatis进行查询映射时候，其实查询出来的每个字段值都放在一个对应的Map中，其中键名是字段名，值则是其对应的值。当select元素提供返回类型属性是resultType的时候，mybatis会将Map里面的键值对取出赋给resultType所指定对象的对应属性（既调用对象里属性的set方法进行填充）。                                                                                    当我们提供的返回类型是resultMap时候，因为Map不能很好的表示领域模型，所以就需要通过进一步的定义把它转化为对应的实体对象。                                                                                                                                                   resultType和resultMap本质上是一样的，都是Map数据结构，但是这两者只能二选一</li><li>resultMap的自动映射级别：<ul><li>NONE：禁止自动匹配</li><li>PARTIAL：（默认）自动匹配所有属性，有内部嵌套（association、collection）的除外</li><li>FULL：自动匹配所有</li></ul></li></ol></li><li><pre><code>&lt;settings&gt;    &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;NONE&quot;/&gt;&lt;/settings&gt;&lt;!--hexoPostRenderEscape:&lt;pre&gt;&lt;code class=&quot;hljs less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;14&lt;/span&gt;. ### &lt;span class=&quot;hljs-selector-tag&quot;&gt;3&lt;/span&gt;.使用@&lt;span class=&quot;hljs-selector-tag&quot;&gt;Param&lt;/span&gt;注解实现多参数入参 </code></pre></li></ol><p><span class="hljs-selector-tag">15</span>. ```<br>    <span class="hljs-selector-tag">int</span> <span class="hljs-selector-tag">deleteById</span>(<span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;id&quot;</span>) int id);</code></pre>:hexoPostRenderEscape–&gt;</p><ol start="16"><li><pre><code>&lt;delete id=&quot;deleteById&quot; parameterType=&quot;com.accp.pojo.provider&quot;&gt;    DELETE FROM `smbms_provider` WHERE id=#&#123;id&#125;&lt;/delete&gt;&lt;!--hexoPostRenderEscape:&lt;pre&gt;&lt;code class=&quot;hljs markdown&quot;&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;17.&lt;/span&gt; ### 4.使用resultMap实现高级结果映射 </code></pre></li></ol><p><span class="hljs-bullet">18.</span> 1. resultMap基本配置项</p><p><span class="hljs-code">       1.1.resultMap属性</span><br><span class="hljs-code"></span><br><span class="hljs-code">       - id：resultMap的唯一标识</span><br><span class="hljs-code">       - type：表示该resultMap的映射结果类型（通常是java实体类）</span><br><span class="hljs-code"></span><br><span class="hljs-code">       1.2.resultMap子节点属性</span><br><span class="hljs-code"></span><br><span class="hljs-code">       - id：一般对应数据库中该行的主键id，设置此项可以提升mybatis性能</span><br><span class="hljs-code">       - result：映射到JavaBean的某个“简单类型”属性，如基础类型、包装类</span><br><span class="hljs-code"></span></code></pre>:hexoPostRenderEscape–&gt;<br>       <resultMap type="com.accp.pojo.user" id="userMap"><br>           <id property="id" column="id"></id><br>           <result property="userCode" column="userCode"/><br>           <result property="userName" column="userName"/><br>           <result property="userPassword" column="userPassword"/><br>       </resultMap><br>       &lt;!–hexoPostRenderEscape:<pre><code class="hljs css"><br>2. <span class="hljs-selector-tag">association</span></p><p>   2<span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.association</span>属性</p><p>   <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">JavaType</span>：完整地<span class="hljs-selector-tag">java</span>类名或别名，若映射到<span class="hljs-selector-tag">JavaBean</span>，则<span class="hljs-selector-tag">mybatis</span>通常会自动检测到其类型；若映射到一个<span class="hljs-selector-tag">HashMap</span>，则应明确指定<span class="hljs-selector-tag">JavaType</span>，来确保所需行为。此处为<span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.accp</span><span class="hljs-selector-class">.pojo</span><span class="hljs-selector-class">.role</span><br>   <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">property</span>：映射数据库列的实体对象的属性，此处为在<span class="hljs-selector-tag">user</span>里面定义的<span class="hljs-selector-tag">role</span>属性</p><p>   2<span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.association</span>子节点属性</p><p>   <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">id</span><br>   <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">result</span><br>     <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">property</span>：映射数据库列的实体对象的属性。此处为<span class="hljs-selector-tag">role</span>属性<br>     <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">column</span>：数据库列名或别名<br></code></pre>:hexoPostRenderEscape–&gt;<br>        <resultMap type="com.accp.pojo.user" id="userMap"><br>           <id property="id" column="id"></id><br>           <result property="userCode" column="userCode"/><br>           <result property="userName" column="userName"/><br>           <result property="userPassword" column="userPassword"/><br>           <association property="role" javaType="com.accp.pojo.role"><br>               <id property="id" column="id"></id><br>               <result property="roleCode" column="roleCode"/><br>               <result property="roleName" column="roleName"/><br>           </association><br>       </resultMap><br>       &lt;!–hexoPostRenderEscape:<pre><code class="hljs crmsh"><br><span class="hljs-number">3</span>. collection</p><ul><li>ofType：完整的java类名或别名，即集合所包含的类型。此处为Address</li><li><span class="hljs-keyword">property</span><span class="hljs-title"></span>：映射数据库列的实体对象的属性。此处为在User里定义的属性：addressList<br></code></pre>:hexoPostRenderEscape–&gt;<br>  private List<Address> addressList;  <pre><code class="hljs plain"></code></pre>  <resultMap type="com.accp.pojo.user" id="userMap">          <id property="id" column="id"></id>          <result property="userCode" column="userCode"/>          <result property="userName" column="userName"/>          <result property="userPassword" column="userPassword"/>          <collection property="addressList" ofType="address">              <id property="id" column="id"></id>              <result property="tel" column="tel"/>              <result property="postCode" column="postCode"/>          </collection>      </resultMap>  <pre><code class="hljs angelscript"><span class="hljs-number">19.</span> ### <span class="hljs-number">5.</span>mybatis缓存 </li></ul><p><span class="hljs-number">20.</span> <span class="hljs-number">1.</span> 一级缓存：是基于mybatis自带的HashMap本地缓存，作用范围为session域内，当session调用flish()或close()方法后，该session中的所有缓存就会被清空</p><pre><code>&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt; 二级缓存：超出session范围之外，可以被所有sqlsession共享&lt;span class=&quot;hljs-number&quot;&gt;3.&lt;/span&gt; 二级缓存配置   （&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;）在mybatis-config.xml中设置</code></pre><p></code></pre>:hexoPostRenderEscape–&gt;<br>       <settings><br>           <setting name="cacheEnabled" value="true"/><br>       </settings><br>       <pre><code class="hljs angelscript">（<span class="hljs-number">2</span>）在mapper.xml中设置缓存</code></pre><br>       <cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"></cache><br>       <pre><code class="hljs lasso">（<span class="hljs-number">3</span>）在mapper文件配置支持<span class="hljs-keyword">cache</span>后，如需对个别查询进行调整，可单独设置<span class="hljs-keyword">cache</span></code></pre><br>       <select id="selectBill" resultType="com.accp.pojo.bill" useCache="true"><br>            ……<br>       </select><br>       ```</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/yangwentao-ywt.github.io/2020/08/21/hello-world/"/>
    <url>/yangwentao-ywt.github.io/2020/08/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
